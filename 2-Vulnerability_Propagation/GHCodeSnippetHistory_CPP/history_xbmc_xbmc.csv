,code_context,code_vuln,commit_date,file,line_vuln:,origin_commit,repo
0,"CSplash::CSplash(const CStdString& imageName)
{
  m_ImageName = imageName;
  fade = 0.5;
}
",m_ImageName = imageName;,2009-09-23 01:49:50 +0000,xbmc/utils/Splash.cpp,34.0,45285e8a9300cd754a760560640b75b09f98035e,xbmc/xbmc
1,"CSplash::CSplash(const CStdString& imageName)
{
  m_ImageName = imageName;
  fade = 0.5;
  m_messageLayout = NULL;
  m_image = NULL;
  m_layoutWasLoading = false;
}

",m_ImageName = imageName;,2009-09-23 01:49:50 +0000,xbmc/utils/Splash.cpp,36.0,891fcbf760a22a29d76baaab71ef57d18d98f6cb,xbmc/xbmc
2,"CSplash::CSplash(const CStdString& imageName)
{
  m_ImageName = imageName;
  fade = 0.5;
  m_messageLayout = NULL;
  m_image = NULL;
  m_layoutWasLoading = false;
}

",m_ImageName = imageName;,2013-02-09 18:34:26 +0100,xbmc/utils/Splash.cpp,35.0,b0fa5b3d3209a55c4f7742026d8fc51df8fc8b93,xbmc/xbmc
3,"CSplash::CSplash(const CStdString& imageName) : CThread(""Splash""), m_ImageName(imageName)
{
  fade = 0.5;
  m_messageLayout = NULL;
  m_image = NULL;
  m_layoutWasLoading = false;
}

",,2014-06-10 12:21:12 +0200,xbmc/utils/Splash.cpp,,7222153932ebe980bbc439a9f01282dbc4b00e73,xbmc/xbmc
4,"CAudioDecoder::CAudioDecoder()
{
  m_codec = NULL;

  m_eof = false;

  m_status = STATUS_NO_FILE;
  m_canPlay = false;

  m_gaplessBufferSize = 0;
  m_blockSize = 4;
}
",CAudioDecoder::CAudioDecoder(),2009-09-23 01:49:50 +0000,xbmc/cores/paplayer/AudioDecoder.cpp,31,45285e8a9300cd754a760560640b75b09f98035e,xbmc/xbmc
5,"CAudioDecoder::CAudioDecoder()
{
  m_codec = NULL;

  m_eof = false;

  m_status = STATUS_NO_FILE;
  m_canPlay = false;
}

",CAudioDecoder::CAudioDecoder(),2012-05-10 09:40:54 +1200,xbmc/cores/paplayer/AudioDecoder.cpp,31,349ec408c33c250b614b68037fec4dd5de5ddcff,xbmc/xbmc
6,"
CAudioDecoder::CAudioDecoder()
{
  m_codec = NULL;

  m_eof = false;

  m_status = STATUS_NO_FILE;
  m_canPlay = false;

  // output buffer (for transferring data from the Pcm Buffer to the rest of the audio chain)
  memset(&m_outputBuffer, 0, OUTPUT_SAMPLES * sizeof(float));
  memset(&m_pcmInputBuffer, 0, INPUT_SIZE * sizeof(BYTE));
  memset(&m_inputBuffer, 0, INPUT_SAMPLES * sizeof(float));

}

",,2013-04-05 10:32:54 +0200,xbmc/cores/paplayer/AudioDecoder.cpp,,92e8bc4a4361d730abac9ad3080cd6923e9d551a,xbmc/xbmc
7,"CAudioDecoder::CAudioDecoder()
{
  m_codec = NULL;

  m_eof = false;

  m_status = STATUS_NO_FILE;
  m_canPlay = false;

  // output buffer (for transferring data from the Pcm Buffer to the rest of the audio chain)
  memset(&m_outputBuffer, 0, OUTPUT_SAMPLES * sizeof(float));
  memset(&m_pcmInputBuffer, 0, INPUT_SIZE * sizeof(BYTE));
  memset(&m_inputBuffer, 0, INPUT_SAMPLES * sizeof(float));

  m_rawBufferSize = 0;
}

",CAudioDecoder::CAudioDecoder(),2016-03-06 15:51:59 +0100,xbmc/cores/paplayer/AudioDecoder.cpp,31,a09e2234749bcfb1f1943b34885afd221ae4063f,xbmc/xbmc
8,"
CAudioDecoder::CAudioDecoder()
{
  m_codec = NULL;
  m_rawBuffer = nullptr;

  m_eof = false;

  m_status = STATUS_NO_FILE;
  m_canPlay = false;

  // output buffer (for transferring data from the Pcm Buffer to the rest of the audio chain)
  memset(&m_outputBuffer, 0, OUTPUT_SAMPLES * sizeof(float));
  memset(&m_pcmInputBuffer, 0, INPUT_SIZE * sizeof(BYTE));
  memset(&m_inputBuffer, 0, INPUT_SAMPLES * sizeof(float));

  m_rawBufferSize = 0;
}

",,2017-11-20 15:25:58 +0100,xbmc/cores/paplayer/AudioDecoder.cpp,,58d81a7503cd67b84230564aaa29a9bfb41def7f,xbmc/xbmc
