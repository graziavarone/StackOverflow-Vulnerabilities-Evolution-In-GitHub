,repo,origin_commit,file,code_context,commit_date,line_vuln,code_vuln
0,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"    }
     }
     }
",2016-08-01 18:02:55 +0100,28,"CharCommand::CharCommand(Chunks * chunks, CCmd cmd, qint64 charPos, char newChar, QUndoCommand *parent)             ^"
1,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"    }
     }
     }
",2016-08-01 18:02:55 +0100,28,"CharCommand::CharCommand(Chunks * chunks, CCmd cmd, qint64 charPos, char newChar, QUndoCommand *parent)             ^"
2,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"    }
     }
     }
",2016-08-01 18:02:55 +0100,32,    _charPos = charPos
3,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"    }
     }
     }
",2016-08-01 18:02:55 +0100,34,    Chunks(QIODevice &ioDevice)
4,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"    }
     }
     }
",2016-08-01 18:02:55 +0100,33,"    UndoStack(Chunks *chunks, QObject * parent=0)"
5,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"#include <QUndoCommand>
    _charPos = charPos;    _newChar = newChar;",2016-08-01 18:02:55 +0100,28,"CharCommand::CharCommand(Chunks * chunks, CCmd cmd, qint64 charPos, char newChar, QUndoCommand *parent)             ^"
6,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"#include <QUndoCommand>
    _charPos = charPos;    _newChar = newChar;",2016-08-01 18:02:55 +0100,28,"CharCommand::CharCommand(Chunks * chunks, CCmd cmd, qint64 charPos, char newChar, QUndoCommand *parent)             ^"
7,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"#include <QUndoCommand>
    _charPos = charPos;    _newChar = newChar;",2016-08-01 18:02:55 +0100,32,    _charPos = charPos
8,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"#include <QUndoCommand>
    _charPos = charPos;    _newChar = newChar;",2016-08-01 18:02:55 +0100,34,    Chunks(QIODevice &ioDevice)
9,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,libs/qhexedit/src/commands.cpp,"#include <QUndoCommand>
    _charPos = charPos;    _newChar = newChar;",2016-08-01 18:02:55 +0100,33,"    UndoStack(Chunks *chunks, QObject * parent=0)"
10,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-18 18:11:07 +0100,88,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8) {}    ^"
11,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-18 18:11:07 +0100,88,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8) {}    ^"
12,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-18 18:11:07 +0100,23,    virtual void reset()
13,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-18 18:11:07 +0100,15,    EditDialog(QWidget* parent = 0)
14,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-18 18:11:07 +0100,75,    int type = kSQLiteMediaType_Void
15,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-26 10:23:04 +0100,84,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8), mainWindow(0) {}    ^"
16,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-26 10:23:04 +0100,25,    virtual void reset()
17,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-01-26 10:23:04 +0100,75,    int type = kSQLiteMediaType_Void
18,sqlitebrowser/sqlitebrowser,6c8712d804a48ddd6eb748a83ce1a4906f08ad5f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 01:38:48 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
19,sqlitebrowser/sqlitebrowser,6c8712d804a48ddd6eb748a83ce1a4906f08ad5f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 01:38:48 +0100,26,    virtual void reset()
20,sqlitebrowser/sqlitebrowser,6c8712d804a48ddd6eb748a83ce1a4906f08ad5f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 01:38:48 +0100,82,    int type = kSQLiteMediaType_Void
21,sqlitebrowser/sqlitebrowser,b88fd9316edd8f61af950841d42955781b007b1a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:11:12 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
22,sqlitebrowser/sqlitebrowser,b88fd9316edd8f61af950841d42955781b007b1a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:11:12 +0100,26,    virtual void reset()
23,sqlitebrowser/sqlitebrowser,b88fd9316edd8f61af950841d42955781b007b1a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:11:12 +0100,103,    int type = kSQLiteMediaType_Void
24,sqlitebrowser/sqlitebrowser,15f685a1eb84d20304748b68734d0197b4387e14,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();,2013-03-17 02:29:45 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
25,sqlitebrowser/sqlitebrowser,15f685a1eb84d20304748b68734d0197b4387e14,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();,2013-03-17 02:29:45 +0100,26,    virtual void reset()
26,sqlitebrowser/sqlitebrowser,b5bade6d5213e250c1851b2521e2e3e840e50d03,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:54:07 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
27,sqlitebrowser/sqlitebrowser,b5bade6d5213e250c1851b2521e2e3e840e50d03,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:54:07 +0100,37,    virtual void toggleOverwriteMode()
28,sqlitebrowser/sqlitebrowser,b5bade6d5213e250c1851b2521e2e3e840e50d03,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 02:54:07 +0100,26,    virtual void reset()
29,sqlitebrowser/sqlitebrowser,67c141c19270c153c5e8e7760744da472095c614,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 12:39:17 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
30,sqlitebrowser/sqlitebrowser,67c141c19270c153c5e8e7760744da472095c614,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 12:39:17 +0100,36,    virtual void hexDataChanged()
31,sqlitebrowser/sqlitebrowser,67c141c19270c153c5e8e7760744da472095c614,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 12:39:17 +0100,38,    virtual void toggleOverwriteMode()
32,sqlitebrowser/sqlitebrowser,67c141c19270c153c5e8e7760744da472095c614,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 12:39:17 +0100,26,    virtual void reset()
33,sqlitebrowser/sqlitebrowser,66b1a62fa433183471861d650459827b381dbcd8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 13:02:49 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
34,sqlitebrowser/sqlitebrowser,66b1a62fa433183471861d650459827b381dbcd8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 13:02:49 +0100,36,    virtual void hexDataChanged()
35,sqlitebrowser/sqlitebrowser,66b1a62fa433183471861d650459827b381dbcd8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 13:02:49 +0100,38,    virtual void toggleOverwriteMode()
36,sqlitebrowser/sqlitebrowser,66b1a62fa433183471861d650459827b381dbcd8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 13:02:49 +0100,26,    virtual void reset()
37,sqlitebrowser/sqlitebrowser,57f4d996cafb0d40eb432ee27c5e07b35099c5da,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)        emit goingAway();,2013-03-17 13:07:57 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
38,sqlitebrowser/sqlitebrowser,57f4d996cafb0d40eb432ee27c5e07b35099c5da,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)        emit goingAway();,2013-03-17 13:07:57 +0100,36,    virtual void hexDataChanged()
39,sqlitebrowser/sqlitebrowser,57f4d996cafb0d40eb432ee27c5e07b35099c5da,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)        emit goingAway();,2013-03-17 13:07:57 +0100,38,    virtual void toggleOverwriteMode()
40,sqlitebrowser/sqlitebrowser,57f4d996cafb0d40eb432ee27c5e07b35099c5da,src/EditDialog.cpp,void EditDialog::accept()    if(hexEdit->data() != oldData)        emit goingAway();,2013-03-17 13:07:57 +0100,26,    virtual void reset()
41,sqlitebrowser/sqlitebrowser,2165e544a2dfb00864de9bb347901e540f434345,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 16:09:28 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
42,sqlitebrowser/sqlitebrowser,2165e544a2dfb00864de9bb347901e540f434345,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 16:09:28 +0100,34,    virtual void hexDataChanged()
43,sqlitebrowser/sqlitebrowser,2165e544a2dfb00864de9bb347901e540f434345,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 16:09:28 +0100,36,    virtual void toggleOverwriteMode()
44,sqlitebrowser/sqlitebrowser,2165e544a2dfb00864de9bb347901e540f434345,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-03-17 16:09:28 +0100,24,    virtual void reset()
45,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-09-19 22:55:35 +0200,35,    virtual void hexDataChanged()
46,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-09-19 22:55:35 +0200,37,    virtual void toggleOverwriteMode()
47,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-09-19 22:55:35 +0200,25,    virtual void reset()
48,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-09-19 22:55:35 +0200,69,    Table(const QString& name): m_name(name) {}    ^
49,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2013-09-19 22:55:35 +0200,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
50,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-02-13 23:52:03 +0100,35,    virtual void hexDataChanged()
51,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-02-13 23:52:03 +0100,37,    virtual void toggleOverwriteMode()
52,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-02-13 23:52:03 +0100,25,    virtual void reset()
53,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-02-13 23:52:03 +0100,69,    Table(const QString& name): m_name(name) {}    ^
54,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-02-13 23:52:03 +0100,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
55,sqlitebrowser/sqlitebrowser,516d71f1467b6907da76d8766f489c59edcd12c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-24 20:34:03 +0200,35,    virtual void hexDataChanged()
56,sqlitebrowser/sqlitebrowser,516d71f1467b6907da76d8766f489c59edcd12c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-24 20:34:03 +0200,37,    virtual void toggleOverwriteMode()
57,sqlitebrowser/sqlitebrowser,516d71f1467b6907da76d8766f489c59edcd12c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-24 20:34:03 +0200,25,    virtual void reset()
58,sqlitebrowser/sqlitebrowser,516d71f1467b6907da76d8766f489c59edcd12c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-24 20:34:03 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
59,sqlitebrowser/sqlitebrowser,516d71f1467b6907da76d8766f489c59edcd12c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-24 20:34:03 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
60,sqlitebrowser/sqlitebrowser,7b9a120d42ec7b6aeb3c2993cc1616af7581dbad,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 11:53:31 +0200,35,    virtual void hexDataChanged()
61,sqlitebrowser/sqlitebrowser,7b9a120d42ec7b6aeb3c2993cc1616af7581dbad,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 11:53:31 +0200,37,    virtual void toggleOverwriteMode()
62,sqlitebrowser/sqlitebrowser,7b9a120d42ec7b6aeb3c2993cc1616af7581dbad,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 11:53:31 +0200,25,    virtual void reset()
63,sqlitebrowser/sqlitebrowser,7b9a120d42ec7b6aeb3c2993cc1616af7581dbad,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 11:53:31 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
64,sqlitebrowser/sqlitebrowser,7b9a120d42ec7b6aeb3c2993cc1616af7581dbad,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 11:53:31 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
65,sqlitebrowser/sqlitebrowser,ae4d04f9b1c6149c89ebcd81d9d0aac298cedd8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 17:30:57 +0200,35,    virtual void hexDataChanged()
66,sqlitebrowser/sqlitebrowser,ae4d04f9b1c6149c89ebcd81d9d0aac298cedd8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 17:30:57 +0200,37,    virtual void toggleOverwriteMode()
67,sqlitebrowser/sqlitebrowser,ae4d04f9b1c6149c89ebcd81d9d0aac298cedd8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 17:30:57 +0200,25,    virtual void reset()
68,sqlitebrowser/sqlitebrowser,ae4d04f9b1c6149c89ebcd81d9d0aac298cedd8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 17:30:57 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
69,sqlitebrowser/sqlitebrowser,ae4d04f9b1c6149c89ebcd81d9d0aac298cedd8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-05-25 17:30:57 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
70,sqlitebrowser/sqlitebrowser,2b65bbcea2bfb958b4c753bea3c40277610077ef,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-12 18:53:53 +0200,35,    virtual void hexDataChanged()
71,sqlitebrowser/sqlitebrowser,2b65bbcea2bfb958b4c753bea3c40277610077ef,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-12 18:53:53 +0200,37,    virtual void toggleOverwriteMode()
72,sqlitebrowser/sqlitebrowser,2b65bbcea2bfb958b4c753bea3c40277610077ef,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-12 18:53:53 +0200,25,    virtual void reset()
73,sqlitebrowser/sqlitebrowser,2b65bbcea2bfb958b4c753bea3c40277610077ef,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-12 18:53:53 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
74,sqlitebrowser/sqlitebrowser,2b65bbcea2bfb958b4c753bea3c40277610077ef,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-12 18:53:53 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
75,sqlitebrowser/sqlitebrowser,682561fbb94b4f8149a47e363d3792771d80e9bb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-19 16:08:44 +0200,35,    virtual void hexDataChanged()
76,sqlitebrowser/sqlitebrowser,682561fbb94b4f8149a47e363d3792771d80e9bb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-19 16:08:44 +0200,37,    virtual void toggleOverwriteMode()
77,sqlitebrowser/sqlitebrowser,682561fbb94b4f8149a47e363d3792771d80e9bb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-19 16:08:44 +0200,25,    virtual void reset()
78,sqlitebrowser/sqlitebrowser,682561fbb94b4f8149a47e363d3792771d80e9bb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-19 16:08:44 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
79,sqlitebrowser/sqlitebrowser,682561fbb94b4f8149a47e363d3792771d80e9bb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2014-06-19 16:08:44 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
80,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,46,    explicit DBBrowserDB () : _db( 0 ) {}             ^
81,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,35,    virtual void hexDataChanged()
82,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,37,    virtual void toggleOverwriteMode()
83,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,25,    virtual void reset()
84,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,78,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
85,sqlitebrowser/sqlitebrowser,9038968c88eac3489e1f97f7ee80f2c6394253b9,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-03-13 00:22:06 +0100,138,    CreateTableWalker(antlr::RefAST r)    ^
86,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,46,    explicit DBBrowserDB () : _db( 0 ) {}             ^
87,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,35,    virtual void hexDataChanged()
88,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,37,    virtual void toggleOverwriteMode()
89,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,25,    virtual void reset()
90,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,78,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
91,sqlitebrowser/sqlitebrowser,332ed3faabefcddcb5b694e29cce821a5ef60b4b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:04:46 +0100,138,    CreateTableWalker(antlr::RefAST r)    ^
92,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,46,    explicit DBBrowserDB () : _db( 0 ) {}             ^
93,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,35,    virtual void hexDataChanged()
94,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,37,    virtual void toggleOverwriteMode()
95,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,25,    virtual void reset()
96,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,78,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
97,sqlitebrowser/sqlitebrowser,50c034012f03d3eb76af297cca7d8a6d01bc3708,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-13 01:28:14 +0100,138,    CreateTableWalker(antlr::RefAST r)    ^
98,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,46,    explicit DBBrowserDB () : _db( 0 ) {}             ^
99,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,35,    virtual void hexDataChanged()
100,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,37,    virtual void toggleOverwriteMode()
101,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,25,    virtual void reset()
102,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,78,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
103,sqlitebrowser/sqlitebrowser,7259241062ee8725f134c362a654d3db490bb232,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-03-22 18:37:04 +0100,138,    CreateTableWalker(antlr::RefAST r)    ^
104,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,46,    explicit DBBrowserDB () : _db( 0 ) {}             ^
105,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,35,    virtual void hexDataChanged()
106,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,37,    virtual void toggleOverwriteMode()
107,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,25,    virtual void reset()
108,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,78,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
109,sqlitebrowser/sqlitebrowser,861ecec52703f8b4da94947880a35c1629af50f8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-05-03 13:22:13 +0200,138,    CreateTableWalker(antlr::RefAST r)    ^
110,sqlitebrowser/sqlitebrowser,1788678732dcac965702e5d6ee3b0a2de9f40f0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-18 23:12:48 +0200,38,    virtual void hexDataChanged()
111,sqlitebrowser/sqlitebrowser,1788678732dcac965702e5d6ee3b0a2de9f40f0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-18 23:12:48 +0200,40,    virtual void toggleOverwriteMode()
112,sqlitebrowser/sqlitebrowser,1788678732dcac965702e5d6ee3b0a2de9f40f0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-18 23:12:48 +0200,25,    virtual void reset()
113,sqlitebrowser/sqlitebrowser,1788678732dcac965702e5d6ee3b0a2de9f40f0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-18 23:12:48 +0200,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
114,sqlitebrowser/sqlitebrowser,e833e491305aca0ad3bd64f693f6be06d3a162ca,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-23 18:19:19 +0200,38,    virtual void hexDataChanged()
115,sqlitebrowser/sqlitebrowser,e833e491305aca0ad3bd64f693f6be06d3a162ca,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-23 18:19:19 +0200,40,    virtual void toggleOverwriteMode()
116,sqlitebrowser/sqlitebrowser,e833e491305aca0ad3bd64f693f6be06d3a162ca,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-23 18:19:19 +0200,25,    virtual void reset()
117,sqlitebrowser/sqlitebrowser,e833e491305aca0ad3bd64f693f6be06d3a162ca,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-08-23 18:19:19 +0200,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
118,sqlitebrowser/sqlitebrowser,29800310c786a3cdc177aca3bf56a51d70b38977,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-11-17 18:07:58 +0100,35,    virtual void hexDataChanged()
119,sqlitebrowser/sqlitebrowser,29800310c786a3cdc177aca3bf56a51d70b38977,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-11-17 18:07:58 +0100,37,    virtual void toggleOverwriteMode()
120,sqlitebrowser/sqlitebrowser,29800310c786a3cdc177aca3bf56a51d70b38977,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-11-17 18:07:58 +0100,25,    virtual void reset()
121,sqlitebrowser/sqlitebrowser,29800310c786a3cdc177aca3bf56a51d70b38977,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-11-17 18:07:58 +0100,75,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
122,sqlitebrowser/sqlitebrowser,29800310c786a3cdc177aca3bf56a51d70b38977,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-11-17 18:07:58 +0100,135,    CreateTableWalker(antlr::RefAST r)    ^
123,sqlitebrowser/sqlitebrowser,f26df79961e3ac0f6e03e616b3747497cb957a6f,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-12-15 22:29:15 +0100,38,    virtual void hexDataChanged()
124,sqlitebrowser/sqlitebrowser,f26df79961e3ac0f6e03e616b3747497cb957a6f,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-12-15 22:29:15 +0100,40,    virtual void toggleOverwriteMode()
125,sqlitebrowser/sqlitebrowser,f26df79961e3ac0f6e03e616b3747497cb957a6f,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-12-15 22:29:15 +0100,25,    virtual void reset()
126,sqlitebrowser/sqlitebrowser,f26df79961e3ac0f6e03e616b3747497cb957a6f,src/EditDialog.cpp,"    ui->editorText->setFocus();
void EditDialog::accept()        emit updateRecordText(curRow, curCol, hexEdit->data());    emit goingAway();",2015-12-15 22:29:15 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
127,sqlitebrowser/sqlitebrowser,672b6f693b5ae066370d8e2452f1605bd6a219c3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-19 14:05:45 +0100,38,    virtual void hexDataChanged()
128,sqlitebrowser/sqlitebrowser,672b6f693b5ae066370d8e2452f1605bd6a219c3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-19 14:05:45 +0100,40,    virtual void toggleOverwriteMode()
129,sqlitebrowser/sqlitebrowser,672b6f693b5ae066370d8e2452f1605bd6a219c3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-19 14:05:45 +0100,24,    virtual void reset()
130,sqlitebrowser/sqlitebrowser,672b6f693b5ae066370d8e2452f1605bd6a219c3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-19 14:05:45 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
131,sqlitebrowser/sqlitebrowser,0e17990583cd99de675a83410c93428e22889d04,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-20 12:15:13 +0100,39,    virtual void hexDataChanged()
132,sqlitebrowser/sqlitebrowser,0e17990583cd99de675a83410c93428e22889d04,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-20 12:15:13 +0100,41,    virtual void toggleOverwriteMode()
133,sqlitebrowser/sqlitebrowser,0e17990583cd99de675a83410c93428e22889d04,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-20 12:15:13 +0100,24,    virtual void reset()
134,sqlitebrowser/sqlitebrowser,0e17990583cd99de675a83410c93428e22889d04,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-20 12:15:13 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
135,sqlitebrowser/sqlitebrowser,540b12a57a7860c94eae183fa6f12caf04f7194b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-21 11:22:43 +0100,40,    virtual void hexDataChanged()
136,sqlitebrowser/sqlitebrowser,540b12a57a7860c94eae183fa6f12caf04f7194b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-21 11:22:43 +0100,42,    virtual void toggleOverwriteMode()
137,sqlitebrowser/sqlitebrowser,540b12a57a7860c94eae183fa6f12caf04f7194b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-21 11:22:43 +0100,24,    virtual void reset()
138,sqlitebrowser/sqlitebrowser,540b12a57a7860c94eae183fa6f12caf04f7194b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-21 11:22:43 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
139,sqlitebrowser/sqlitebrowser,63c08d027dcd0b4ca1cbbfc80456c5fc32b429af,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-22 15:09:33 +0100,40,    virtual void hexDataChanged()
140,sqlitebrowser/sqlitebrowser,63c08d027dcd0b4ca1cbbfc80456c5fc32b429af,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-22 15:09:33 +0100,42,    virtual void toggleOverwriteMode()
141,sqlitebrowser/sqlitebrowser,63c08d027dcd0b4ca1cbbfc80456c5fc32b429af,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-22 15:09:33 +0100,24,    virtual void reset()
142,sqlitebrowser/sqlitebrowser,63c08d027dcd0b4ca1cbbfc80456c5fc32b429af,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2015-12-22 15:09:33 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
143,sqlitebrowser/sqlitebrowser,54cea17f3a0fef4cf5c954978c02e8df4ea36503,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();",2016-01-18 15:56:57 +0000,40,    virtual void hexDataChanged()
144,sqlitebrowser/sqlitebrowser,54cea17f3a0fef4cf5c954978c02e8df4ea36503,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();",2016-01-18 15:56:57 +0000,42,    virtual void toggleOverwriteMode()
145,sqlitebrowser/sqlitebrowser,54cea17f3a0fef4cf5c954978c02e8df4ea36503,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();",2016-01-18 15:56:57 +0000,24,    virtual void reset()
146,sqlitebrowser/sqlitebrowser,54cea17f3a0fef4cf5c954978c02e8df4ea36503,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)    emit goingAway();",2016-01-18 15:56:57 +0000,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
147,sqlitebrowser/sqlitebrowser,b72bcd7a887f294fb8b82b9710a9b30a2c303b85,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-09 22:32:13 +0200,40,    virtual void hexDataChanged()
148,sqlitebrowser/sqlitebrowser,b72bcd7a887f294fb8b82b9710a9b30a2c303b85,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-09 22:32:13 +0200,42,    virtual void toggleOverwriteMode()
149,sqlitebrowser/sqlitebrowser,b72bcd7a887f294fb8b82b9710a9b30a2c303b85,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-09 22:32:13 +0200,24,    virtual void reset()
150,sqlitebrowser/sqlitebrowser,b72bcd7a887f294fb8b82b9710a9b30a2c303b85,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-09 22:32:13 +0200,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
151,sqlitebrowser/sqlitebrowser,4467b75782d3a8d5599de8b98ba4c1f8ba1b50d1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-13 13:41:02 +0100,40,    virtual void hexDataChanged()
152,sqlitebrowser/sqlitebrowser,4467b75782d3a8d5599de8b98ba4c1f8ba1b50d1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-13 13:41:02 +0100,42,    virtual void toggleOverwriteMode()
153,sqlitebrowser/sqlitebrowser,4467b75782d3a8d5599de8b98ba4c1f8ba1b50d1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-13 13:41:02 +0100,24,    virtual void reset()
154,sqlitebrowser/sqlitebrowser,4467b75782d3a8d5599de8b98ba4c1f8ba1b50d1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-13 13:41:02 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
155,sqlitebrowser/sqlitebrowser,94fcfc1a6682d7bbbdf29a31c44d09ecb0fe9d89,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:25:51 +0100,40,    virtual void hexDataChanged()
156,sqlitebrowser/sqlitebrowser,94fcfc1a6682d7bbbdf29a31c44d09ecb0fe9d89,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:25:51 +0100,42,    virtual void toggleOverwriteMode()
157,sqlitebrowser/sqlitebrowser,94fcfc1a6682d7bbbdf29a31c44d09ecb0fe9d89,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:25:51 +0100,24,    virtual void reset()
158,sqlitebrowser/sqlitebrowser,94fcfc1a6682d7bbbdf29a31c44d09ecb0fe9d89,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:25:51 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
159,sqlitebrowser/sqlitebrowser,2bcc6038398889c573d876dca6b863d07032ce40,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:27:24 +0100,40,    virtual void hexDataChanged()
160,sqlitebrowser/sqlitebrowser,2bcc6038398889c573d876dca6b863d07032ce40,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:27:24 +0100,42,    virtual void toggleOverwriteMode()
161,sqlitebrowser/sqlitebrowser,2bcc6038398889c573d876dca6b863d07032ce40,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:27:24 +0100,24,    virtual void reset()
162,sqlitebrowser/sqlitebrowser,2bcc6038398889c573d876dca6b863d07032ce40,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-20 19:27:24 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
163,sqlitebrowser/sqlitebrowser,f881f95ea97a77a4b27b0a56dab2fa49c92a7c8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-21 22:55:13 +0100,40,    virtual void hexDataChanged()
164,sqlitebrowser/sqlitebrowser,f881f95ea97a77a4b27b0a56dab2fa49c92a7c8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-21 22:55:13 +0100,42,    virtual void toggleOverwriteMode()
165,sqlitebrowser/sqlitebrowser,f881f95ea97a77a4b27b0a56dab2fa49c92a7c8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-21 22:55:13 +0100,24,    virtual void reset()
166,sqlitebrowser/sqlitebrowser,f881f95ea97a77a4b27b0a56dab2fa49c92a7c8a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-21 22:55:13 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
167,sqlitebrowser/sqlitebrowser,3a8fdafdf484d725897ca0515cb04992bf083efe,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-22 20:50:57 +0100,40,    virtual void hexDataChanged()
168,sqlitebrowser/sqlitebrowser,3a8fdafdf484d725897ca0515cb04992bf083efe,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-22 20:50:57 +0100,42,    virtual void toggleOverwriteMode()
169,sqlitebrowser/sqlitebrowser,3a8fdafdf484d725897ca0515cb04992bf083efe,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-22 20:50:57 +0100,24,    virtual void reset()
170,sqlitebrowser/sqlitebrowser,3a8fdafdf484d725897ca0515cb04992bf083efe,src/EditDialog.cpp,"++ b/src/EditDialog.cpp
void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-22 20:50:57 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
171,sqlitebrowser/sqlitebrowser,7eb733b31fa0f1a1d2bdd2d5d292f338e3a722dc,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 17:26:34 +0100,40,    virtual void hexDataChanged()
172,sqlitebrowser/sqlitebrowser,7eb733b31fa0f1a1d2bdd2d5d292f338e3a722dc,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 17:26:34 +0100,42,    virtual void toggleOverwriteMode()
173,sqlitebrowser/sqlitebrowser,7eb733b31fa0f1a1d2bdd2d5d292f338e3a722dc,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 17:26:34 +0100,24,    virtual void reset()
174,sqlitebrowser/sqlitebrowser,7eb733b31fa0f1a1d2bdd2d5d292f338e3a722dc,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 17:26:34 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
175,sqlitebrowser/sqlitebrowser,89baf3464d0d789ff70ea6f1d99f7f1a8eec86c2,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-27 20:41:01 +0100,40,    virtual void hexDataChanged()
176,sqlitebrowser/sqlitebrowser,89baf3464d0d789ff70ea6f1d99f7f1a8eec86c2,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-27 20:41:01 +0100,42,    virtual void toggleOverwriteMode()
177,sqlitebrowser/sqlitebrowser,89baf3464d0d789ff70ea6f1d99f7f1a8eec86c2,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-27 20:41:01 +0100,24,    virtual void reset()
178,sqlitebrowser/sqlitebrowser,89baf3464d0d789ff70ea6f1d99f7f1a8eec86c2,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-07-27 20:41:01 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
179,sqlitebrowser/sqlitebrowser,82cb3fd49a295cd737396a08fd3c27c48633e320,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 21:03:28 +0100,40,    virtual void hexDataChanged()
180,sqlitebrowser/sqlitebrowser,82cb3fd49a295cd737396a08fd3c27c48633e320,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 21:03:28 +0100,42,    virtual void toggleOverwriteMode()
181,sqlitebrowser/sqlitebrowser,82cb3fd49a295cd737396a08fd3c27c48633e320,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 21:03:28 +0100,24,    virtual void reset()
182,sqlitebrowser/sqlitebrowser,82cb3fd49a295cd737396a08fd3c27c48633e320,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-07-27 21:03:28 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
183,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-01 18:02:55 +0100,40,    virtual void hexDataChanged()
184,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-01 18:02:55 +0100,42,    virtual void toggleOverwriteMode()
185,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-01 18:02:55 +0100,24,    virtual void reset()
186,sqlitebrowser/sqlitebrowser,ff302c4b6b48fbf7f5dc17f59169790685c85ea5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-01 18:02:55 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
187,sqlitebrowser/sqlitebrowser,b5da4ed640491da6449be2f2c1b1aa1686826e0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-03 20:24:17 +0300,40,    virtual void hexDataChanged()
188,sqlitebrowser/sqlitebrowser,b5da4ed640491da6449be2f2c1b1aa1686826e0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-03 20:24:17 +0300,42,    virtual void toggleOverwriteMode()
189,sqlitebrowser/sqlitebrowser,b5da4ed640491da6449be2f2c1b1aa1686826e0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-03 20:24:17 +0300,24,    virtual void reset()
190,sqlitebrowser/sqlitebrowser,b5da4ed640491da6449be2f2c1b1aa1686826e0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-03 20:24:17 +0300,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
191,sqlitebrowser/sqlitebrowser,fe23d56e25e1e69dcce4d696fae19f2e3cd5e85f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 21:36:44 +0100,40,    virtual void hexDataChanged()
192,sqlitebrowser/sqlitebrowser,fe23d56e25e1e69dcce4d696fae19f2e3cd5e85f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 21:36:44 +0100,42,    virtual void toggleOverwriteMode()
193,sqlitebrowser/sqlitebrowser,fe23d56e25e1e69dcce4d696fae19f2e3cd5e85f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 21:36:44 +0100,24,    virtual void reset()
194,sqlitebrowser/sqlitebrowser,fe23d56e25e1e69dcce4d696fae19f2e3cd5e85f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 21:36:44 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
195,sqlitebrowser/sqlitebrowser,ced6b57bd81f489d3a1b5c849207816cd06528da,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 23:38:34 +0100,40,    virtual void hexDataChanged()
196,sqlitebrowser/sqlitebrowser,ced6b57bd81f489d3a1b5c849207816cd06528da,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 23:38:34 +0100,42,    virtual void toggleOverwriteMode()
197,sqlitebrowser/sqlitebrowser,ced6b57bd81f489d3a1b5c849207816cd06528da,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 23:38:34 +0100,24,    virtual void reset()
198,sqlitebrowser/sqlitebrowser,ced6b57bd81f489d3a1b5c849207816cd06528da,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-06 23:38:34 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
199,sqlitebrowser/sqlitebrowser,b835ae800b5f638bd2c594d8fb2125e192bc8e6a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-09 13:04:32 +0100,41,    virtual void toggleOverwriteMode()
200,sqlitebrowser/sqlitebrowser,b835ae800b5f638bd2c594d8fb2125e192bc8e6a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-09 13:04:32 +0100,24,    virtual void reset()
201,sqlitebrowser/sqlitebrowser,b835ae800b5f638bd2c594d8fb2125e192bc8e6a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-09 13:04:32 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
202,sqlitebrowser/sqlitebrowser,ad10e8016c3310bf0b0ce65b19252289b141ec53,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-08-13 01:56:14 +0300,38,    virtual void toggleOverwriteMode()
203,sqlitebrowser/sqlitebrowser,ad10e8016c3310bf0b0ce65b19252289b141ec53,src/EditDialog.cpp,"void EditDialog::accept()    if(hexEdit->data() != oldData)        emit updateRecordText(curRow, curCol, hexEdit->data());",2016-08-13 01:56:14 +0300,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
204,sqlitebrowser/sqlitebrowser,47b1224bc2313262c96fbfa93f7fed60468fe42b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-13 16:34:07 +0100,38,    virtual void toggleOverwriteMode()
205,sqlitebrowser/sqlitebrowser,47b1224bc2313262c96fbfa93f7fed60468fe42b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-13 16:34:07 +0100,20,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
206,sqlitebrowser/sqlitebrowser,f4590da1d85adac519c6ab1a9ea3e21a4fad89f2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-19 13:22:58 +0300,38,    virtual void toggleOverwriteMode()
207,sqlitebrowser/sqlitebrowser,f4590da1d85adac519c6ab1a9ea3e21a4fad89f2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-19 13:22:58 +0300,21,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
208,sqlitebrowser/sqlitebrowser,345a75118ad7981ac729cbe9a9f28e39c7ba39ff,src/EditDialog.cpp,"        ui->buttonApply->setEnabled(true);
 }
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-19 13:57:39 +0300,39,    virtual void toggleOverwriteMode()
209,sqlitebrowser/sqlitebrowser,345a75118ad7981ac729cbe9a9f28e39c7ba39ff,src/EditDialog.cpp,"        ui->buttonApply->setEnabled(true);
 }
void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-08-19 13:57:39 +0300,21,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
210,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,55,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
211,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,147,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
212,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,76,    virtual QString toSql(const FieldVector& applyOn) const
213,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,78,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
214,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,93,    virtual QString toSql(const FieldVector& applyOn) const
215,sqlitebrowser/sqlitebrowser,3a06395f885e7476cc652c92713fc526934ca9c5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-09-03 22:30:55 +0300,95,    virtual ConstraintTypes type() const { return UniqueConstraintType
216,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,55,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
217,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,147,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
218,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,76,    virtual QString toSql(const FieldVector& applyOn) const
219,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,78,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
220,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,93,    virtual QString toSql(const FieldVector& applyOn) const
221,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,95,    virtual ConstraintTypes type() const { return UniqueConstraintType
222,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,103,    virtual QString toSql(const FieldVector& applyOn) const
223,sqlitebrowser/sqlitebrowser,2bdd71a78b29f434d13eb3b3fc73a9bd16a101d6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-10-04 16:04:17 +0100,105,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
224,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,55,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
225,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,147,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
226,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,76,    virtual QString toSql(const FieldVector& applyOn) const
227,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,78,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
228,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,93,    virtual QString toSql(const FieldVector& applyOn) const
229,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,95,    virtual ConstraintTypes type() const { return UniqueConstraintType
230,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,103,    virtual QString toSql(const FieldVector& applyOn) const
231,sqlitebrowser/sqlitebrowser,f62d78ce1522eb7082415ad976cbc4a856af2876,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2016-12-19 19:43:28 +0100,105,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
232,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,24,"    DBBrowserObject() : name( """" ) { }    ^"
233,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,117,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
234,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,149,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
235,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,138,    virtual QString toSql(const FieldVector& applyOn) const
236,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,140,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
237,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,155,    virtual QString toSql(const FieldVector& applyOn) const
238,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,157,    virtual ConstraintTypes type() const { return UniqueConstraintType
239,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,165,    virtual QString toSql(const FieldVector& applyOn) const
240,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,167,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
241,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,228,    virtual ObjectTypes type() const { return Object::Table
242,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,236,    QString sql() const
243,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,253,    void clear()
244,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,348,    virtual ObjectTypes type() const { return Object::Index
245,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,350,    virtual QString baseTable() const { return m_table
246,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,371,    void clear()
247,sqlitebrowser/sqlitebrowser,e43dbddbd36ca2474d220ca4a01185e3bf55e7ea,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-01-20 22:37:59 +0100,377,    QString sql() const
248,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,133,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
249,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,130,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
250,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,154,    virtual QString toSql(const FieldVector& applyOn) const
251,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,156,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
252,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,171,    virtual QString toSql(const FieldVector& applyOn) const
253,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,173,    virtual ConstraintTypes type() const { return UniqueConstraintType
254,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,181,    virtual QString toSql(const FieldVector& applyOn) const
255,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,183,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
256,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,248,    virtual Types type() const { return Object::Table
257,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,256,    QString sql() const
258,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,273,    void clear()
259,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,275,    virtual FieldInfoList fieldInformation() const
260,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,348,    virtual Types type() const { return Object::Index
261,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,350,    virtual QString baseTable() const { return m_table
262,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,370,    void clear()
263,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,376,    QString sql() const
264,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,385,    virtual FieldInfoList fieldInformation() const
265,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,402,    virtual Types type() const { return Object::View
266,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,404,    QString sql() const { /* TODO */ return m_originalSql
267,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,408,    void clear()
268,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,415,    virtual FieldInfoList fieldInformation() const
269,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,427,    virtual Types type() const { return Object::Trigger
270,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,429,    QString sql() const { /* TODO */ return m_originalSql
271,sqlitebrowser/sqlitebrowser,f1194d845e9a5c309efe26980cff7c9023713371,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-03-20 23:16:52 +0100,433,    virtual QString baseTable() const { return m_table
272,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,40,    ObjectIdentifier(QVariant variant)    ^
273,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
274,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,276,    CheckConstraint(const QString& expr = QString())    ^
275,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,135,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
276,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,241,    virtual QString toSql(const FieldVector& applyOn) const
277,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
278,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,258,    virtual QString toSql(const FieldVector& applyOn) const
279,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
280,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,268,    virtual QString toSql(const FieldVector& applyOn) const
281,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
282,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,284,    virtual QString toSql(const FieldVector& applyOn) const
283,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,286,    virtual ConstraintTypes type() const { return CheckConstraintType
284,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,354,    virtual Types type() const { return Object::Table
285,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
286,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,379,    void clear()
287,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,381,    virtual FieldInfoList fieldInformation() const
288,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,454,    virtual Types type() const { return Object::Index
289,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,456,    virtual QString baseTable() const { return m_table
290,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,476,    void clear()
291,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
292,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,491,    virtual FieldInfoList fieldInformation() const
293,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,508,    virtual Types type() const { return Object::View
294,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
295,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,514,    void clear()
296,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,521,    virtual FieldInfoList fieldInformation() const
297,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,533,    virtual Types type() const { return Object::Trigger
298,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
299,sqlitebrowser/sqlitebrowser,fb6ea5ac60eceed8b777bd1334ed02210f71cddf,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-10 15:19:03 +0200,539,    virtual QString baseTable() const { return m_table
300,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,40,    ObjectIdentifier(QVariant variant)    ^
301,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
302,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,276,    CheckConstraint(const QString& expr = QString())    ^
303,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,135,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
304,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,241,    virtual QString toSql(const FieldVector& applyOn) const
305,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
306,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,258,    virtual QString toSql(const FieldVector& applyOn) const
307,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
308,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,268,    virtual QString toSql(const FieldVector& applyOn) const
309,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
310,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,284,    virtual QString toSql(const FieldVector& applyOn) const
311,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,286,    virtual ConstraintTypes type() const { return CheckConstraintType
312,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,354,    virtual Types type() const { return Object::Table
313,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
314,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,379,    void clear()
315,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,381,    virtual FieldInfoList fieldInformation() const
316,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,454,    virtual Types type() const { return Object::Index
317,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,456,    virtual QString baseTable() const { return m_table
318,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,476,    void clear()
319,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
320,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,491,    virtual FieldInfoList fieldInformation() const
321,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,508,    virtual Types type() const { return Object::View
322,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
323,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,514,    void clear()
324,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,521,    virtual FieldInfoList fieldInformation() const
325,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,533,    virtual Types type() const { return Object::Trigger
326,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
327,sqlitebrowser/sqlitebrowser,f20f9967679cb5651670fb593ca835c92feb498b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-09-15 10:39:38 +0200,539,    virtual QString baseTable() const { return m_table
328,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,40,    ObjectIdentifier(QVariant variant)    ^
329,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
330,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,276,    CheckConstraint(const QString& expr = QString())    ^
331,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,135,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
332,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,241,    virtual QString toSql(const FieldVector& applyOn) const
333,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
334,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,258,    virtual QString toSql(const FieldVector& applyOn) const
335,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
336,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,268,    virtual QString toSql(const FieldVector& applyOn) const
337,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
338,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,284,    virtual QString toSql(const FieldVector& applyOn) const
339,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,286,    virtual ConstraintTypes type() const { return CheckConstraintType
340,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,354,    virtual Types type() const { return Object::Table
341,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
342,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,379,    void clear()
343,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,381,    virtual FieldInfoList fieldInformation() const
344,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,454,    virtual Types type() const { return Object::Index
345,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,456,    virtual QString baseTable() const { return m_table
346,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,476,    void clear()
347,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
348,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,491,    virtual FieldInfoList fieldInformation() const
349,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,508,    virtual Types type() const { return Object::View
350,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
351,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,514,    void clear()
352,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,521,    virtual FieldInfoList fieldInformation() const
353,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,533,    virtual Types type() const { return Object::Trigger
354,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
355,sqlitebrowser/sqlitebrowser,5de8f737237941df951c55bb504e2757d50bb475,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-05 22:47:02 +0200,539,    virtual QString baseTable() const { return m_table
356,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,40,    ObjectIdentifier(QVariant variant)    ^
357,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
358,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,276,    CheckConstraint(const QString& expr = QString())    ^
359,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,135,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
360,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,241,    virtual QString toSql(const FieldVector& applyOn) const
361,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
362,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,258,    virtual QString toSql(const FieldVector& applyOn) const
363,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
364,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,268,    virtual QString toSql(const FieldVector& applyOn) const
365,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
366,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,284,    virtual QString toSql(const FieldVector& applyOn) const
367,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,286,    virtual ConstraintTypes type() const { return CheckConstraintType
368,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,354,    virtual Types type() const { return Object::Table
369,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
370,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,379,    void clear()
371,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,381,    virtual FieldInfoList fieldInformation() const
372,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,454,    virtual Types type() const { return Object::Index
373,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,456,    virtual QString baseTable() const { return m_table
374,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,476,    void clear()
375,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
376,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,491,    virtual FieldInfoList fieldInformation() const
377,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,508,    virtual Types type() const { return Object::View
378,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
379,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,514,    void clear()
380,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,521,    virtual FieldInfoList fieldInformation() const
381,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,533,    virtual Types type() const { return Object::Trigger
382,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
383,sqlitebrowser/sqlitebrowser,d5e4fe9f664a41c8e66f285d770932826c1aed57,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-07 18:00:48 +0200,539,    virtual QString baseTable() const { return m_table
384,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,40,    ObjectIdentifier(QVariant variant)    ^
385,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
386,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,276,    CheckConstraint(const QString& expr = QString())    ^
387,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,140,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
388,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
389,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
390,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
391,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
392,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
393,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
394,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
395,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
396,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,354,    virtual Types type() const { return Object::Table
397,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
398,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,379,    void clear()
399,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,381,    virtual FieldInfoList fieldInformation() const
400,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,454,    virtual Types type() const { return Object::Index
401,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,456,    virtual QString baseTable() const { return m_table
402,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,476,    void clear()
403,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
404,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,491,    virtual FieldInfoList fieldInformation() const
405,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,508,    virtual Types type() const { return Object::View
406,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
407,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,514,    void clear()
408,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,521,    virtual FieldInfoList fieldInformation() const
409,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,533,    virtual Types type() const { return Object::Trigger
410,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
411,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-10-30 13:10:08 +0100,539,    virtual QString baseTable() const { return m_table
412,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
413,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
414,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
415,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
416,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
417,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
418,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
419,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
420,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
421,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,354,    virtual Types type() const { return Object::Table
422,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
423,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,379,    void clear()
424,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,381,    virtual FieldInfoList fieldInformation() const
425,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,454,    virtual Types type() const { return Object::Index
426,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,456,    virtual QString baseTable() const { return m_table
427,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,476,    void clear()
428,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
429,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,491,    virtual FieldInfoList fieldInformation() const
430,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,508,    virtual Types type() const { return Object::View
431,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
432,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,514,    void clear()
433,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,521,    virtual FieldInfoList fieldInformation() const
434,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,533,    virtual Types type() const { return Object::Trigger
435,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
436,sqlitebrowser/sqlitebrowser,c832d8a58c857e309d41516d3918f783f3e848be,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 14:57:36 +0100,539,    virtual QString baseTable() const { return m_table
437,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
438,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
439,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
440,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
441,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
442,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
443,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
444,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
445,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
446,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,354,    virtual Types type() const { return Object::Table
447,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
448,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,379,    void clear()
449,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,381,    virtual FieldInfoList fieldInformation() const
450,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,454,    virtual Types type() const { return Object::Index
451,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,456,    virtual QString baseTable() const { return m_table
452,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,476,    void clear()
453,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
454,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,491,    virtual FieldInfoList fieldInformation() const
455,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,508,    virtual Types type() const { return Object::View
456,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
457,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,514,    void clear()
458,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,521,    virtual FieldInfoList fieldInformation() const
459,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,533,    virtual Types type() const { return Object::Trigger
460,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
461,sqlitebrowser/sqlitebrowser,279c419df90829e90e2512b7d6d8c3caf897b14c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:10:07 +0100,539,    virtual QString baseTable() const { return m_table
462,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
463,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
464,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
465,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
466,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
467,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
468,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
469,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
470,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
471,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,354,    virtual Types type() const { return Object::Table
472,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
473,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,379,    void clear()
474,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,381,    virtual FieldInfoList fieldInformation() const
475,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,454,    virtual Types type() const { return Object::Index
476,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,456,    virtual QString baseTable() const { return m_table
477,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,476,    void clear()
478,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
479,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,491,    virtual FieldInfoList fieldInformation() const
480,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,508,    virtual Types type() const { return Object::View
481,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
482,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,514,    void clear()
483,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,521,    virtual FieldInfoList fieldInformation() const
484,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,533,    virtual Types type() const { return Object::Trigger
485,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
486,sqlitebrowser/sqlitebrowser,3c910a9e593378e87358fdd7f2ae1bd41f2c62de,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-18 16:28:38 +0100,539,    virtual QString baseTable() const { return m_table
487,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
488,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
489,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
490,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
491,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
492,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
493,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
494,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
495,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
496,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,354,    virtual Types type() const { return Object::Table
497,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
498,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,379,    void clear()
499,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,381,    virtual FieldInfoList fieldInformation() const
500,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,454,    virtual Types type() const { return Object::Index
501,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,456,    virtual QString baseTable() const { return m_table
502,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,476,    void clear()
503,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
504,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,491,    virtual FieldInfoList fieldInformation() const
505,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,508,    virtual Types type() const { return Object::View
506,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
507,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,514,    void clear()
508,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,521,    virtual FieldInfoList fieldInformation() const
509,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,533,    virtual Types type() const { return Object::Trigger
510,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
511,sqlitebrowser/sqlitebrowser,67c5ed963ebd23c2aea16b2c4a63644cf1e96a35,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-23 00:39:17 +0100,539,    virtual QString baseTable() const { return m_table
512,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
513,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
514,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
515,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
516,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
517,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
518,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
519,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
520,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
521,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,354,    virtual Types type() const { return Object::Table
522,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
523,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,379,    void clear()
524,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,381,    virtual FieldInfoList fieldInformation() const
525,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,454,    virtual Types type() const { return Object::Index
526,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,456,    virtual QString baseTable() const { return m_table
527,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,476,    void clear()
528,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
529,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,491,    virtual FieldInfoList fieldInformation() const
530,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,508,    virtual Types type() const { return Object::View
531,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
532,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,514,    void clear()
533,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,521,    virtual FieldInfoList fieldInformation() const
534,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,533,    virtual Types type() const { return Object::Trigger
535,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
536,sqlitebrowser/sqlitebrowser,189f19695a84a6e867477c26d1c8114c3600fd9b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-24 00:27:48 +0100,539,    virtual QString baseTable() const { return m_table
537,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
538,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
539,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
540,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
541,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
542,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
543,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
544,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
545,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
546,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,354,    virtual Types type() const { return Object::Table
547,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
548,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,379,    void clear()
549,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,381,    virtual FieldInfoList fieldInformation() const
550,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,454,    virtual Types type() const { return Object::Index
551,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,456,    virtual QString baseTable() const { return m_table
552,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,476,    void clear()
553,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
554,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,491,    virtual FieldInfoList fieldInformation() const
555,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,508,    virtual Types type() const { return Object::View
556,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
557,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,514,    void clear()
558,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,521,    virtual FieldInfoList fieldInformation() const
559,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,533,    virtual Types type() const { return Object::Trigger
560,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
561,sqlitebrowser/sqlitebrowser,d486a9ff64287aed194ea56025cab366cfe007a9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-11-27 22:10:10 +0100,539,    virtual QString baseTable() const { return m_table
562,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
563,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
564,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
565,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
566,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
567,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
568,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
569,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
570,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
571,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,354,    virtual Types type() const { return Object::Table
572,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
573,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,379,    void clear()
574,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,381,    virtual FieldInfoList fieldInformation() const
575,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,454,    virtual Types type() const { return Object::Index
576,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,456,    virtual QString baseTable() const { return m_table
577,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,476,    void clear()
578,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
579,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,491,    virtual FieldInfoList fieldInformation() const
580,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,508,    virtual Types type() const { return Object::View
581,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
582,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,514,    void clear()
583,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,521,    virtual FieldInfoList fieldInformation() const
584,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,533,    virtual Types type() const { return Object::Trigger
585,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
586,sqlitebrowser/sqlitebrowser,678079a77a5144a7b75c51fe65642d6e6e4fc411,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 00:01:09 +0100,539,    virtual QString baseTable() const { return m_table
587,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
588,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
589,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
590,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
591,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
592,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
593,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
594,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
595,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
596,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,354,    virtual Types type() const { return Object::Table
597,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
598,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,379,    void clear()
599,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,381,    virtual FieldInfoList fieldInformation() const
600,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,454,    virtual Types type() const { return Object::Index
601,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,456,    virtual QString baseTable() const { return m_table
602,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,476,    void clear()
603,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
604,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,491,    virtual FieldInfoList fieldInformation() const
605,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,508,    virtual Types type() const { return Object::View
606,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
607,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,514,    void clear()
608,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,521,    virtual FieldInfoList fieldInformation() const
609,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,533,    virtual Types type() const { return Object::Trigger
610,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
611,sqlitebrowser/sqlitebrowser,05149150a58494017663354bfb56f2f2695d21c7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-06 19:26:59 +0100,539,    virtual QString baseTable() const { return m_table
612,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
613,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
614,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
615,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
616,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
617,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
618,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
619,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
620,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
621,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,354,    virtual Types type() const { return Object::Table
622,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
623,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,379,    void clear()
624,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,381,    virtual FieldInfoList fieldInformation() const
625,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,454,    virtual Types type() const { return Object::Index
626,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,456,    virtual QString baseTable() const { return m_table
627,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,476,    void clear()
628,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
629,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,491,    virtual FieldInfoList fieldInformation() const
630,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,508,    virtual Types type() const { return Object::View
631,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
632,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,514,    void clear()
633,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,521,    virtual FieldInfoList fieldInformation() const
634,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,533,    virtual Types type() const { return Object::Trigger
635,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
636,sqlitebrowser/sqlitebrowser,232130bc602b4a7e8c46ebf7a6c2abbb34f51db6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-08 17:50:15 +0100,539,    virtual QString baseTable() const { return m_table
637,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
638,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
639,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
640,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
641,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
642,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
643,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
644,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
645,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
646,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,354,    virtual Types type() const { return Object::Table
647,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
648,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,379,    void clear()
649,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,381,    virtual FieldInfoList fieldInformation() const
650,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,454,    virtual Types type() const { return Object::Index
651,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,456,    virtual QString baseTable() const { return m_table
652,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,476,    void clear()
653,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
654,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,491,    virtual FieldInfoList fieldInformation() const
655,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,508,    virtual Types type() const { return Object::View
656,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
657,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,514,    void clear()
658,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,521,    virtual FieldInfoList fieldInformation() const
659,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,533,    virtual Types type() const { return Object::Trigger
660,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
661,sqlitebrowser/sqlitebrowser,a0e0fc98ae35398952314b5adb571cab90c7d3f3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:19:17 +0100,539,    virtual QString baseTable() const { return m_table
662,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
663,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
664,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
665,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
666,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
667,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
668,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
669,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
670,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
671,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,354,    virtual Types type() const { return Object::Table
672,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
673,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,379,    void clear()
674,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,381,    virtual FieldInfoList fieldInformation() const
675,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,454,    virtual Types type() const { return Object::Index
676,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,456,    virtual QString baseTable() const { return m_table
677,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,476,    void clear()
678,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
679,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,491,    virtual FieldInfoList fieldInformation() const
680,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,508,    virtual Types type() const { return Object::View
681,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
682,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,514,    void clear()
683,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,521,    virtual FieldInfoList fieldInformation() const
684,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,533,    virtual Types type() const { return Object::Trigger
685,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
686,sqlitebrowser/sqlitebrowser,5a4d8fdd36891901f75b9184ec65cf10daa3c3e9,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-23 22:24:00 +0100,539,    virtual QString baseTable() const { return m_table
687,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
688,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
689,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
690,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
691,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
692,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
693,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
694,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
695,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
696,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,354,    virtual Types type() const { return Object::Table
697,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
698,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,379,    void clear()
699,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,381,    virtual FieldInfoList fieldInformation() const
700,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,454,    virtual Types type() const { return Object::Index
701,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,456,    virtual QString baseTable() const { return m_table
702,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,476,    void clear()
703,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
704,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,491,    virtual FieldInfoList fieldInformation() const
705,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,508,    virtual Types type() const { return Object::View
706,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
707,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,514,    void clear()
708,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,521,    virtual FieldInfoList fieldInformation() const
709,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,533,    virtual Types type() const { return Object::Trigger
710,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
711,sqlitebrowser/sqlitebrowser,5562119563deb726128ebecb5608f55a9859a215,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2017-12-31 15:25:01 +0100,539,    virtual QString baseTable() const { return m_table
712,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
713,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
714,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
715,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
716,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
717,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
718,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
719,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
720,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
721,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,354,    virtual Types type() const { return Object::Table
722,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
723,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,379,    void clear()
724,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,381,    virtual FieldInfoList fieldInformation() const
725,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,454,    virtual Types type() const { return Object::Index
726,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,456,    virtual QString baseTable() const { return m_table
727,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,476,    void clear()
728,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
729,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,491,    virtual FieldInfoList fieldInformation() const
730,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,508,    virtual Types type() const { return Object::View
731,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
732,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,514,    void clear()
733,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,521,    virtual FieldInfoList fieldInformation() const
734,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,533,    virtual Types type() const { return Object::Trigger
735,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
736,sqlitebrowser/sqlitebrowser,27c657902e354b11fb5778cc09518a95d37d3698,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-01 17:20:50 +0100,539,    virtual QString baseTable() const { return m_table
737,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
738,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
739,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
740,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
741,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
742,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,271,    virtual QString toSql(const FieldVector& applyOn) const
743,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,273,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
744,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,290,    virtual QString toSql(const FieldVector& applyOn) const
745,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,292,    virtual ConstraintTypes type() const { return CheckConstraintType
746,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,360,    virtual Types type() const { return Object::Table
747,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,368,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
748,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,385,    void clear()
749,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,387,    virtual FieldInfoList fieldInformation() const
750,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,460,    virtual Types type() const { return Object::Index
751,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,462,    virtual QString baseTable() const { return m_table
752,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,482,    void clear()
753,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,488,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
754,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,497,    virtual FieldInfoList fieldInformation() const
755,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,514,    virtual Types type() const { return Object::View
756,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
757,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,520,    void clear()
758,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,527,    virtual FieldInfoList fieldInformation() const
759,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,539,    virtual Types type() const { return Object::Trigger
760,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,541,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
761,sqlitebrowser/sqlitebrowser,fec9e74025dea6cd3ced3bad1910a3a367ce864a,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-08 14:00:05 +0100,545,    virtual QString baseTable() const { return m_table
762,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
763,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
764,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
765,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
766,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
767,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
768,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
769,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
770,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
771,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,354,    virtual Types type() const { return Object::Table
772,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
773,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,379,    void clear()
774,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,381,    virtual FieldInfoList fieldInformation() const
775,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,454,    virtual Types type() const { return Object::Index
776,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,456,    virtual QString baseTable() const { return m_table
777,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,476,    void clear()
778,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
779,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,491,    virtual FieldInfoList fieldInformation() const
780,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,508,    virtual Types type() const { return Object::View
781,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
782,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,514,    void clear()
783,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,521,    virtual FieldInfoList fieldInformation() const
784,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,533,    virtual Types type() const { return Object::Trigger
785,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
786,sqlitebrowser/sqlitebrowser,0c99f32ce7aa4a0e5481722934c9b6495fcd6589,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-01-27 18:30:24 +0100,539,    virtual QString baseTable() const { return m_table
787,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,224,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
788,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,245,    virtual QString toSql(const FieldVector& applyOn) const
789,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,247,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
790,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,262,    virtual QString toSql(const FieldVector& applyOn) const
791,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,264,    virtual ConstraintTypes type() const { return UniqueConstraintType
792,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,275,    virtual QString toSql(const FieldVector& applyOn) const
793,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,277,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
794,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,294,    virtual QString toSql(const FieldVector& applyOn) const
795,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,296,    virtual ConstraintTypes type() const { return CheckConstraintType
796,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,364,    virtual Types type() const { return Object::Table
797,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,372,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
798,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,389,    void clear()
799,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,391,    virtual FieldInfoList fieldInformation() const
800,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,464,    virtual Types type() const { return Object::Index
801,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,466,    virtual QString baseTable() const { return m_table
802,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,486,    void clear()
803,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,492,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
804,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,501,    virtual FieldInfoList fieldInformation() const
805,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,518,    virtual Types type() const { return Object::View
806,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,520,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
807,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,524,    void clear()
808,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,531,    virtual FieldInfoList fieldInformation() const
809,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,543,    virtual Types type() const { return Object::Trigger
810,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
811,sqlitebrowser/sqlitebrowser,b8e96379a749ef9369ab739feceb2d5f54ca9cf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-02-03 16:14:30 +0100,549,    virtual QString baseTable() const { return m_table
812,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
813,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
814,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
815,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
816,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
817,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
818,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
819,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
820,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
821,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
822,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,382,    virtual Types type() const { return Object::Table
823,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
824,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,407,    void clear()
825,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,409,    virtual FieldInfoList fieldInformation() const
826,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,482,    virtual Types type() const { return Object::Index
827,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,484,    virtual QString baseTable() const { return m_table
828,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,504,    void clear()
829,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
830,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,519,    virtual FieldInfoList fieldInformation() const
831,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,536,    virtual Types type() const { return Object::View
832,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
833,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,542,    void clear()
834,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,549,    virtual FieldInfoList fieldInformation() const
835,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,561,    virtual Types type() const { return Object::Trigger
836,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
837,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,567,    virtual QString baseTable() const { return m_table
838,sqlitebrowser/sqlitebrowser,885f4f7847a46d85f45501ff67bde089830e81f6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-20 23:50:34 +0200,43,        void operator() (sqlite3 * db) const                                   ^
839,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
840,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
841,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
842,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
843,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
844,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
845,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
846,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
847,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
848,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
849,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,382,    virtual Types type() const { return Object::Table
850,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
851,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,407,    void clear()
852,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,409,    virtual FieldInfoList fieldInformation() const
853,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,482,    virtual Types type() const { return Object::Index
854,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,484,    virtual QString baseTable() const { return m_table
855,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,504,    void clear()
856,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
857,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,519,    virtual FieldInfoList fieldInformation() const
858,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,536,    virtual Types type() const { return Object::View
859,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
860,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,542,    void clear()
861,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,549,    virtual FieldInfoList fieldInformation() const
862,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,561,    virtual Types type() const { return Object::Trigger
863,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
864,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,567,    virtual QString baseTable() const { return m_table
865,sqlitebrowser/sqlitebrowser,614068a57a86c5b903984a6735ae9a3cba3c7e88,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-06-21 00:24:34 +0200,43,        void operator() (sqlite3 * db) const                                   ^
866,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
867,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
868,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,272,    virtual QString toSql(const FieldVector& applyOn) const
869,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
870,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,289,    virtual QString toSql(const FieldVector& applyOn) const
871,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
872,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,302,    virtual QString toSql(const FieldVector& applyOn) const
873,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
874,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,321,    virtual QString toSql(const FieldVector& applyOn) const
875,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
876,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,391,    virtual Types type() const { return Object::Table
877,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,399,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
878,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,416,    void clear()
879,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,418,    virtual FieldInfoList fieldInformation() const
880,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,491,    virtual Types type() const { return Object::Index
881,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,493,    virtual QString baseTable() const { return m_table
882,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,513,    void clear()
883,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,519,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
884,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,528,    virtual FieldInfoList fieldInformation() const
885,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,545,    virtual Types type() const { return Object::View
886,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,547,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
887,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,551,    void clear()
888,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,558,    virtual FieldInfoList fieldInformation() const
889,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,570,    virtual Types type() const { return Object::Trigger
890,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,572,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
891,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,576,    virtual QString baseTable() const { return m_table
892,sqlitebrowser/sqlitebrowser,8f1f55bf3d5231214e477f43be4b6dbecdb45968,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-08 01:41:15 +0200,43,        void operator() (sqlite3 * db) const                                   ^
893,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
894,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
895,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,272,    virtual QString toSql(const FieldVector& applyOn) const
896,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
897,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,289,    virtual QString toSql(const FieldVector& applyOn) const
898,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
899,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,302,    virtual QString toSql(const FieldVector& applyOn) const
900,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
901,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,321,    virtual QString toSql(const FieldVector& applyOn) const
902,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
903,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,391,    virtual Types type() const { return Object::Table
904,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,399,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
905,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,416,    void clear()
906,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,418,    virtual FieldInfoList fieldInformation() const
907,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,491,    virtual Types type() const { return Object::Index
908,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,493,    virtual QString baseTable() const { return m_table
909,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,513,    void clear()
910,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,519,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
911,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,528,    virtual FieldInfoList fieldInformation() const
912,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,545,    virtual Types type() const { return Object::View
913,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,547,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
914,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,551,    void clear()
915,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,558,    virtual FieldInfoList fieldInformation() const
916,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,570,    virtual Types type() const { return Object::Trigger
917,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,572,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
918,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,576,    virtual QString baseTable() const { return m_table
919,sqlitebrowser/sqlitebrowser,961141ec36a88c6c53a3262ae77da14f46c8f4c0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-07-10 20:57:55 +0200,43,        void operator() (sqlite3 * db) const                                   ^
920,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
921,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
922,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
923,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
924,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
925,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
926,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
927,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
928,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
929,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
930,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,408,    virtual Types type() const { return Object::Table
931,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
932,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,430,    virtual FieldInfoList fieldInformation() const
933,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,496,    virtual Types type() const { return Object::Index
934,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,502,    virtual QString baseTable() const { return m_table
935,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
936,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,526,    virtual FieldInfoList fieldInformation() const
937,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,542,    virtual Types type() const { return Object::View
938,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
939,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,552,    virtual FieldInfoList fieldInformation() const
940,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,561,    virtual Types type() const { return Object::Trigger
941,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
942,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,567,    virtual QString baseTable() const { return m_table
943,sqlitebrowser/sqlitebrowser,6779ad8e7a7384c2f3e39ecdc01798029c6c6583,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 13:28:22 +0200,43,        void operator() (sqlite3 * db) const                                   ^
944,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
945,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
946,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
947,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
948,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
949,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
950,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
951,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
952,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
953,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
954,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,408,    virtual Types type() const { return Object::Table
955,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
956,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,430,    virtual FieldInfoList fieldInformation() const
957,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,496,    virtual Types type() const { return Object::Index
958,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,502,    virtual QString baseTable() const { return m_table
959,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
960,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,526,    virtual FieldInfoList fieldInformation() const
961,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,542,    virtual Types type() const { return Object::View
962,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
963,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,552,    virtual FieldInfoList fieldInformation() const
964,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,561,    virtual Types type() const { return Object::Trigger
965,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
966,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,567,    virtual QString baseTable() const { return m_table
967,sqlitebrowser/sqlitebrowser,71f26cbc830fd1d32b99d1179b2fae0344fafefe,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-15 14:36:13 +0200,43,        void operator() (sqlite3 * db) const                                   ^
968,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
969,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
970,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
971,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
972,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
973,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
974,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
975,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
976,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
977,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
978,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,408,    virtual Types type() const { return Object::Table
979,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
980,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,430,    virtual FieldInfoList fieldInformation() const
981,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,496,    virtual Types type() const { return Object::Index
982,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,502,    virtual QString baseTable() const { return m_table
983,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
984,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,526,    virtual FieldInfoList fieldInformation() const
985,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,542,    virtual Types type() const { return Object::View
986,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
987,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,552,    virtual FieldInfoList fieldInformation() const
988,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,561,    virtual Types type() const { return Object::Trigger
989,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
990,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,567,    virtual QString baseTable() const { return m_table
991,sqlitebrowser/sqlitebrowser,9ca387886b4382b860802b2b384c797703c2fc0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-16 17:12:33 +0200,43,        void operator() (sqlite3 * db) const                                   ^
992,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
993,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
994,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
995,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
996,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
997,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
998,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
999,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1000,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
1001,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
1002,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,408,    virtual Types type() const { return Object::Table
1003,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1004,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,430,    virtual FieldInfoList fieldInformation() const
1005,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,496,    virtual Types type() const { return Object::Index
1006,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,502,    virtual QString baseTable() const { return m_table
1007,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1008,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,526,    virtual FieldInfoList fieldInformation() const
1009,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,542,    virtual Types type() const { return Object::View
1010,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1011,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,552,    virtual FieldInfoList fieldInformation() const
1012,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,561,    virtual Types type() const { return Object::Trigger
1013,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1014,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,567,    virtual QString baseTable() const { return m_table
1015,sqlitebrowser/sqlitebrowser,dd3417e1c438b86b69ff89c5cf28b70a289ec637,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 20:48:16 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1016,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1017,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1018,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
1019,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1020,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
1021,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
1022,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
1023,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1024,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
1025,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
1026,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,408,    virtual Types type() const { return Object::Table
1027,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1028,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,430,    virtual FieldInfoList fieldInformation() const
1029,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,496,    virtual Types type() const { return Object::Index
1030,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,502,    virtual QString baseTable() const { return m_table
1031,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1032,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,526,    virtual FieldInfoList fieldInformation() const
1033,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,542,    virtual Types type() const { return Object::View
1034,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1035,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,552,    virtual FieldInfoList fieldInformation() const
1036,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,561,    virtual Types type() const { return Object::Trigger
1037,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1038,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,567,    virtual QString baseTable() const { return m_table
1039,sqlitebrowser/sqlitebrowser,a5d6b5018b8a94b70072d2d3095b8eb3ae30e7eb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-21 23:19:48 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1040,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1041,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1042,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,272,    virtual QString toSql(const QStringList& applyOn) const
1043,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1044,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,289,    virtual QString toSql(const QStringList& applyOn) const
1045,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
1046,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,302,    virtual QString toSql(const QStringList& applyOn) const
1047,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1048,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,321,    virtual QString toSql(const QStringList& applyOn) const
1049,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
1050,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,407,    virtual Types type() const { return Object::Table
1051,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,417,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1052,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,429,    virtual FieldInfoList fieldInformation() const
1053,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,495,    virtual Types type() const { return Object::Index
1054,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,501,    virtual QString baseTable() const { return m_table
1055,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1056,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,525,    virtual FieldInfoList fieldInformation() const
1057,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,541,    virtual Types type() const { return Object::View
1058,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1059,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,551,    virtual FieldInfoList fieldInformation() const
1060,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,560,    virtual Types type() const { return Object::Trigger
1061,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,562,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1062,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,566,    virtual QString baseTable() const { return m_table
1063,sqlitebrowser/sqlitebrowser,749e7ed78c916c8a4a54779875c8185e81d43659,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-29 18:54:09 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1064,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1065,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1066,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,272,    virtual QString toSql(const QStringList& applyOn) const
1067,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1068,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,289,    virtual QString toSql(const QStringList& applyOn) const
1069,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
1070,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,302,    virtual QString toSql(const QStringList& applyOn) const
1071,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1072,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,321,    virtual QString toSql(const QStringList& applyOn) const
1073,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
1074,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,407,    virtual Types type() const { return Object::Table
1075,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,417,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1076,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,429,    virtual FieldInfoList fieldInformation() const
1077,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,495,    virtual Types type() const { return Object::Index
1078,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,501,    virtual QString baseTable() const { return m_table
1079,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1080,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,525,    virtual FieldInfoList fieldInformation() const
1081,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,541,    virtual Types type() const { return Object::View
1082,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1083,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,551,    virtual FieldInfoList fieldInformation() const
1084,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,560,    virtual Types type() const { return Object::Trigger
1085,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,562,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1086,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,566,    virtual QString baseTable() const { return m_table
1087,sqlitebrowser/sqlitebrowser,8b94eabd9d6a3bea7df9e857e4efb56567469b9d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 01:01:56 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1088,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1089,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1090,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,272,    virtual QString toSql(const QStringList& applyOn) const
1091,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1092,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,289,    virtual QString toSql(const QStringList& applyOn) const
1093,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
1094,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,302,    virtual QString toSql(const QStringList& applyOn) const
1095,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1096,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,321,    virtual QString toSql(const QStringList& applyOn) const
1097,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
1098,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,407,    virtual Types type() const { return Object::Table
1099,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,417,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1100,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,429,    virtual FieldInfoList fieldInformation() const
1101,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,495,    virtual Types type() const { return Object::Index
1102,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,501,    virtual QString baseTable() const { return m_table
1103,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1104,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,525,    virtual FieldInfoList fieldInformation() const
1105,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,541,    virtual Types type() const { return Object::View
1106,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1107,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,551,    virtual FieldInfoList fieldInformation() const
1108,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,560,    virtual Types type() const { return Object::Trigger
1109,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,562,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1110,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,566,    virtual QString baseTable() const { return m_table
1111,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,367,    QStringList filters
1112,sqlitebrowser/sqlitebrowser,1c060662588d3fce8a0557126f184fb96974ca47,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:21:49 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1113,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1114,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1115,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,272,    virtual QString toSql(const QStringList& applyOn) const
1116,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1117,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,289,    virtual QString toSql(const QStringList& applyOn) const
1118,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
1119,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,302,    virtual QString toSql(const QStringList& applyOn) const
1120,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1121,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,321,    virtual QString toSql(const QStringList& applyOn) const
1122,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
1123,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,407,    virtual Types type() const { return Object::Table
1124,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,417,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1125,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,429,    virtual FieldInfoList fieldInformation() const
1126,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,495,    virtual Types type() const { return Object::Index
1127,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,501,    virtual QString baseTable() const { return m_table
1128,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1129,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,525,    virtual FieldInfoList fieldInformation() const
1130,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,541,    virtual Types type() const { return Object::View
1131,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1132,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,551,    virtual FieldInfoList fieldInformation() const
1133,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,560,    virtual Types type() const { return Object::Trigger
1134,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,562,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1135,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,566,    virtual QString baseTable() const { return m_table
1136,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,369,    QStringList filters
1137,sqlitebrowser/sqlitebrowser,a90d1b24d3a126b8549797ec5c4d1572b3e4a452,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-09-30 23:51:49 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1138,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1139,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1140,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,272,    virtual QString toSql(const QStringList& applyOn) const
1141,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,274,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1142,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,289,    virtual QString toSql(const QStringList& applyOn) const
1143,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,291,    virtual ConstraintTypes type() const { return UniqueConstraintType
1144,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,302,    virtual QString toSql(const QStringList& applyOn) const
1145,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,304,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1146,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,321,    virtual QString toSql(const QStringList& applyOn) const
1147,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,323,    virtual ConstraintTypes type() const { return CheckConstraintType
1148,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,407,    virtual Types type() const { return Object::Table
1149,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,417,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1150,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,429,    virtual FieldInfoList fieldInformation() const
1151,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,495,    virtual Types type() const { return Object::Index
1152,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,501,    virtual QString baseTable() const { return m_table
1153,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,516,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1154,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,525,    virtual FieldInfoList fieldInformation() const
1155,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,541,    virtual Types type() const { return Object::View
1156,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,545,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1157,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,551,    virtual FieldInfoList fieldInformation() const
1158,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,560,    virtual Types type() const { return Object::Trigger
1159,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,562,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1160,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,566,    virtual QString baseTable() const { return m_table
1161,sqlitebrowser/sqlitebrowser,d607a675a40090d82ba2406642cb49f839bf88e0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-01 00:14:23 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1162,sqlitebrowser/sqlitebrowser,d526fa0b6431ecba1ce6abd9e446b1c2884e8af3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-27 22:24:01 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1163,sqlitebrowser/sqlitebrowser,d526fa0b6431ecba1ce6abd9e446b1c2884e8af3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-27 22:24:01 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1164,sqlitebrowser/sqlitebrowser,d526fa0b6431ecba1ce6abd9e446b1c2884e8af3,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-10-27 22:24:01 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1165,sqlitebrowser/sqlitebrowser,a81ea2b983034700fdb6b38e5007420871e30001,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-11-08 16:55:51 +0100,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1166,sqlitebrowser/sqlitebrowser,a81ea2b983034700fdb6b38e5007420871e30001,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-11-08 16:55:51 +0100,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1167,sqlitebrowser/sqlitebrowser,a81ea2b983034700fdb6b38e5007420871e30001,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-11-08 16:55:51 +0100,43,        void operator() (sqlite3 * db) const                                   ^
1168,sqlitebrowser/sqlitebrowser,6425fb177eba293ae000415392d088af96e27c91,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-12-06 18:56:24 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1169,sqlitebrowser/sqlitebrowser,6425fb177eba293ae000415392d088af96e27c91,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-12-06 18:56:24 +0100,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1170,sqlitebrowser/sqlitebrowser,6425fb177eba293ae000415392d088af96e27c91,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2018-12-06 18:56:24 +0100,43,        void operator() (sqlite3 * db) const                                   ^
1171,sqlitebrowser/sqlitebrowser,5f4d0ee7ff5a2795ed48b27f62ae1c7d286e794f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-08 21:45:50 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1172,sqlitebrowser/sqlitebrowser,5f4d0ee7ff5a2795ed48b27f62ae1c7d286e794f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-08 21:45:50 +0100,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1173,sqlitebrowser/sqlitebrowser,5f4d0ee7ff5a2795ed48b27f62ae1c7d286e794f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-08 21:45:50 +0100,43,        void operator() (sqlite3 * db) const                                   ^
1174,sqlitebrowser/sqlitebrowser,3eebffd7c6ef98a22fc8603975ad25964e329e8d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-09 20:01:22 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1175,sqlitebrowser/sqlitebrowser,3eebffd7c6ef98a22fc8603975ad25964e329e8d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-09 20:01:22 +0100,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1176,sqlitebrowser/sqlitebrowser,3eebffd7c6ef98a22fc8603975ad25964e329e8d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-02-09 20:01:22 +0100,43,        void operator() (sqlite3 * db) const                                   ^
1177,sqlitebrowser/sqlitebrowser,e9d8af605924004f2a99826b26eb6cdb5bb09714,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-04 20:42:53 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1178,sqlitebrowser/sqlitebrowser,e9d8af605924004f2a99826b26eb6cdb5bb09714,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-04 20:42:53 +0100,41,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1179,sqlitebrowser/sqlitebrowser,e9d8af605924004f2a99826b26eb6cdb5bb09714,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-04 20:42:53 +0100,45,        void operator() (sqlite3 * db) const                                   ^
1180,sqlitebrowser/sqlitebrowser,fc73ff4e5caf92164389b738b7acc4d2d72c1de8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-08 00:02:44 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1181,sqlitebrowser/sqlitebrowser,fc73ff4e5caf92164389b738b7acc4d2d72c1de8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-08 00:02:44 +0100,41,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1182,sqlitebrowser/sqlitebrowser,fc73ff4e5caf92164389b738b7acc4d2d72c1de8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-08 00:02:44 +0100,45,        void operator() (sqlite3 * db) const                                   ^
1183,sqlitebrowser/sqlitebrowser,45c1e2abfd9dd95c8a744c24406b09dff5502e71,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-10 01:01:07 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1184,sqlitebrowser/sqlitebrowser,45c1e2abfd9dd95c8a744c24406b09dff5502e71,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-10 01:01:07 +0100,41,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1185,sqlitebrowser/sqlitebrowser,45c1e2abfd9dd95c8a744c24406b09dff5502e71,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-10 01:01:07 +0100,45,        void operator() (sqlite3 * db) const                                   ^
1186,sqlitebrowser/sqlitebrowser,29bfcc4922f965ed9ef01a6028efcb1fedb6b01c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-17 19:23:02 +0100,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1187,sqlitebrowser/sqlitebrowser,29bfcc4922f965ed9ef01a6028efcb1fedb6b01c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-17 19:23:02 +0100,41,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1188,sqlitebrowser/sqlitebrowser,29bfcc4922f965ed9ef01a6028efcb1fedb6b01c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-03-17 19:23:02 +0100,45,        void operator() (sqlite3 * db) const                                   ^
1189,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-04-29 19:14:10 +0200,256,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1190,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-04-29 19:14:10 +0200,52,        void operator() (sqlite3 * db) const                                   ^
1191,sqlitebrowser/sqlitebrowser,d344f396b298ac973465e02f820a4ac3842ed048,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-02 20:09:24 +0200,155,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1192,sqlitebrowser/sqlitebrowser,d344f396b298ac973465e02f820a4ac3842ed048,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-02 20:09:24 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1193,sqlitebrowser/sqlitebrowser,800a8daf11837e9f0a62c10887988eb4a12441b1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-07 21:56:06 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1194,sqlitebrowser/sqlitebrowser,800a8daf11837e9f0a62c10887988eb4a12441b1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-07 21:56:06 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1195,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-07 22:09:21 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1196,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-07 22:09:21 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1197,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-29 15:54:27 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1198,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-05-29 15:54:27 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1199,sqlitebrowser/sqlitebrowser,5e965b1a20b54ab356604aae42cddb6392c0b7ed,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-11 22:10:24 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1200,sqlitebrowser/sqlitebrowser,5e965b1a20b54ab356604aae42cddb6392c0b7ed,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-11 22:10:24 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1201,sqlitebrowser/sqlitebrowser,592fa91e25e3c208f4d3bfe6b7e4c206524bf7c6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-11 22:10:24 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1202,sqlitebrowser/sqlitebrowser,592fa91e25e3c208f4d3bfe6b7e4c206524bf7c6,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-11 22:10:24 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1203,sqlitebrowser/sqlitebrowser,ec4e0dc5ccbf86789ea83bff4b512d36531624d7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-26 14:18:53 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1204,sqlitebrowser/sqlitebrowser,ec4e0dc5ccbf86789ea83bff4b512d36531624d7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-07-26 14:18:53 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1205,sqlitebrowser/sqlitebrowser,2958e5acba9f74af9d6921c2db8fa8c8521d5e3c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-08-28 19:08:27 +0200,155,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1206,sqlitebrowser/sqlitebrowser,2958e5acba9f74af9d6921c2db8fa8c8521d5e3c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-08-28 19:08:27 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1207,sqlitebrowser/sqlitebrowser,2d4c5ce0ba82065c71b47af196391bf20c2ba460,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-09-22 21:57:38 +0200,160,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1208,sqlitebrowser/sqlitebrowser,2d4c5ce0ba82065c71b47af196391bf20c2ba460,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-09-22 21:57:38 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1209,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-11-06 20:25:18 +0100,168,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1210,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-11-06 20:25:18 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1211,sqlitebrowser/sqlitebrowser,8e8a3aa216da675f0a1268b81f0205299e7732f5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-15 18:58:01 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1212,sqlitebrowser/sqlitebrowser,8e8a3aa216da675f0a1268b81f0205299e7732f5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-15 18:58:01 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1213,sqlitebrowser/sqlitebrowser,61c8f47861c22350df677775516f2479dffa2ca7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 00:12:04 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1214,sqlitebrowser/sqlitebrowser,61c8f47861c22350df677775516f2479dffa2ca7,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 00:12:04 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1215,sqlitebrowser/sqlitebrowser,34c15538b2c96bdca366675a8fdcb9656155dcf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 18:37:56 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1216,sqlitebrowser/sqlitebrowser,34c15538b2c96bdca366675a8fdcb9656155dcf4,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 18:37:56 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1217,sqlitebrowser/sqlitebrowser,604ec0578b6b7f63bac091c6c22922e24ffc0ac1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 22:02:57 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1218,sqlitebrowser/sqlitebrowser,604ec0578b6b7f63bac091c6c22922e24ffc0ac1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-22 22:02:57 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1219,sqlitebrowser/sqlitebrowser,a085d99b64cb4ef8f601532bb515a296e12bd1ee,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-23 12:35:13 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1220,sqlitebrowser/sqlitebrowser,a085d99b64cb4ef8f601532bb515a296e12bd1ee,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-23 12:35:13 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1221,sqlitebrowser/sqlitebrowser,45e86d3bec68d027f0333c3d9aeda1e146071197,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-23 13:57:50 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1222,sqlitebrowser/sqlitebrowser,45e86d3bec68d027f0333c3d9aeda1e146071197,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2019-12-23 13:57:50 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1223,sqlitebrowser/sqlitebrowser,1d1afaad218dfea9d9cdcf83821b3c5b33963ebb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-02-14 21:00:52 -0300,177,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1224,sqlitebrowser/sqlitebrowser,1d1afaad218dfea9d9cdcf83821b3c5b33963ebb,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-02-14 21:00:52 -0300,54,        void operator() (sqlite3 * db) const                                   ^
1225,sqlitebrowser/sqlitebrowser,d0978ef462e9b7bd8c94544808e21a1677c24958,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-03 11:09:31 +0200,177,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1226,sqlitebrowser/sqlitebrowser,d0978ef462e9b7bd8c94544808e21a1677c24958,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-03 11:09:31 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1227,sqlitebrowser/sqlitebrowser,f81da0d29c8b9c55927ae170b6dad93b65cfb8f1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-03 17:04:46 +0200,177,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1228,sqlitebrowser/sqlitebrowser,f81da0d29c8b9c55927ae170b6dad93b65cfb8f1,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-03 17:04:46 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1229,sqlitebrowser/sqlitebrowser,a803069d5eb26d6fbf150aa2355cfec1de4ec5a0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-22 12:39:52 +0200,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1230,sqlitebrowser/sqlitebrowser,a803069d5eb26d6fbf150aa2355cfec1de4ec5a0,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-06-22 12:39:52 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1231,sqlitebrowser/sqlitebrowser,7f7c9e40ec58e45e4b4f85a35bda3df749f48c0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-08-12 21:55:33 +0200,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1232,sqlitebrowser/sqlitebrowser,7f7c9e40ec58e45e4b4f85a35bda3df749f48c0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-08-12 21:55:33 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1233,sqlitebrowser/sqlitebrowser,d8ca11f57aead731fa185d2572e69932d1b5d6e8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-09-20 21:24:00 +0200,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1234,sqlitebrowser/sqlitebrowser,d8ca11f57aead731fa185d2572e69932d1b5d6e8,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-09-20 21:24:00 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1235,sqlitebrowser/sqlitebrowser,7c147456c50ab0b2cd63cc06700862f77afda858,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-09-27 18:29:04 +0200,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1236,sqlitebrowser/sqlitebrowser,7c147456c50ab0b2cd63cc06700862f77afda858,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-09-27 18:29:04 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1237,sqlitebrowser/sqlitebrowser,9a70af79733fb6544cb6ed5941d403c3824600d2,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-11-27 17:44:35 +0100,,
1238,sqlitebrowser/sqlitebrowser,1e4a88dd0ac709c29d721377a8ec483816a0be49,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2020-12-06 20:17:06 +0100,,
1239,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2021-01-14 12:44:44 +0100,,
1240,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2021-01-22 14:38:35 +0100,,
1241,sqlitebrowser/sqlitebrowser,d5937c6d711c0626f199bcbcf9fbc01566b7c87f,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2021-07-23 20:06:33 +0200,,
1242,sqlitebrowser/sqlitebrowser,8f5c17e2a76958286b36b01f479caefee90848a5,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2022-06-19 23:52:15 +0200,898,        bool isModified
1243,sqlitebrowser/sqlitebrowser,a78dd0292f7e1149b4e81a3987531aa67098b92c,src/EditDialog.cpp,"void EditDialog::accept()
{
    if(hexEdit->data() != oldData)
        emit updateRecordText(curRow, curCol, hexEdit->data());
    emit goingAway();
}
",2022-08-07 18:26:45 +0200,901,        bool isModified
1244,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-18 18:11:07 +0100,88,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8) {}    ^"
1245,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-18 18:11:07 +0100,88,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8) {}    ^"
1246,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-18 18:11:07 +0100,22,    virtual void checkInput()
1247,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-18 18:11:07 +0100,21,    virtual void updatePreview()
1248,sqlitebrowser/sqlitebrowser,d05e90e4956aaf26a40ba0c6203a1b8aa8668de2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-18 18:11:07 +0100,89,"            char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1249,sqlitebrowser/sqlitebrowser,9c6bb1daed915934cf6a3899a4a89d0299f07859,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-25 14:27:54 +0100,84,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8), mainWindow(0) {}    ^"
1250,sqlitebrowser/sqlitebrowser,9c6bb1daed915934cf6a3899a4a89d0299f07859,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-25 14:27:54 +0100,22,    virtual void checkInput()
1251,sqlitebrowser/sqlitebrowser,9c6bb1daed915934cf6a3899a4a89d0299f07859,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-25 14:27:54 +0100,21,    virtual void updatePreview()
1252,sqlitebrowser/sqlitebrowser,9c6bb1daed915934cf6a3899a4a89d0299f07859,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-25 14:27:54 +0100,89,"            char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1253,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-26 10:23:04 +0100,84,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), curEncoding(kEncodingUTF8), mainWindow(0) {}    ^"
1254,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-26 10:23:04 +0100,22,    virtual void checkInput()
1255,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-26 10:23:04 +0100,21,    virtual void updatePreview()
1256,sqlitebrowser/sqlitebrowser,c5dafe9617ebdd401ba69ce0deaa4ddfd8e87a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-01-26 10:23:04 +0100,89,"            char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1257,sqlitebrowser/sqlitebrowser,a1e4f154dd88de7c5d4519b4bd35d04db15567d8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-20 22:38:22 +0100,77,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
1258,sqlitebrowser/sqlitebrowser,a1e4f154dd88de7c5d4519b4bd35d04db15567d8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-20 22:38:22 +0100,22,    virtual void checkInput()
1259,sqlitebrowser/sqlitebrowser,a1e4f154dd88de7c5d4519b4bd35d04db15567d8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-20 22:38:22 +0100,21,    virtual void updatePreview()
1260,sqlitebrowser/sqlitebrowser,a1e4f154dd88de7c5d4519b4bd35d04db15567d8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-20 22:38:22 +0100,116,"            char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1261,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,80,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
1262,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,22,    virtual void checkInput()
1263,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,21,    virtual void updatePreview()
1264,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,63,    Table(const QString& name): m_name(name) {}    ^
1265,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,119,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1266,sqlitebrowser/sqlitebrowser,e46d3401dfebda4e32c5b05ad0f333a7aad6e4d2,src/ImportCsvDialog.cpp,"++ b/src/ImportCsvDialog.cpp
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:47:38 +0100,126,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1267,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,80,"    DBBrowserDB (): _db( 0 ) , hasValidBrowseSet(false), mainWindow(0) {}    ^"
1268,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,22,    virtual void checkInput()
1269,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,21,    virtual void updatePreview()
1270,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,63,    Table(const QString& name): m_name(name) {}    ^
1271,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,119,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1272,sqlitebrowser/sqlitebrowser,c5399932e2ed1816a074d5b7586172c5626ad6d1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-03-28 18:52:07 +0100,126,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1273,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,67,"    DBBrowserDB (): _db( 0 ), mainWindow(0) {}    ^"
1274,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,22,    virtual void checkInput()
1275,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,21,    virtual void updatePreview()
1276,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,63,    Table(const QString& name): m_name(name) {}    ^
1277,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,119,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1278,sqlitebrowser/sqlitebrowser,7f03e01a86465f0fea8236e1e8e6830ac56d10c0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-23 18:04:27 +0200,128,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1279,sqlitebrowser/sqlitebrowser,b9afbe2aea02f3ce18d88d1610582afd22ad5284,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-31 16:13:58 +0200,22,    virtual void checkInput()
1280,sqlitebrowser/sqlitebrowser,b9afbe2aea02f3ce18d88d1610582afd22ad5284,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-31 16:13:58 +0200,21,    virtual void updatePreview()
1281,sqlitebrowser/sqlitebrowser,b9afbe2aea02f3ce18d88d1610582afd22ad5284,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-31 16:13:58 +0200,63,    Table(const QString& name): m_name(name) {}    ^
1282,sqlitebrowser/sqlitebrowser,b9afbe2aea02f3ce18d88d1610582afd22ad5284,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-31 16:13:58 +0200,119,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1283,sqlitebrowser/sqlitebrowser,b9afbe2aea02f3ce18d88d1610582afd22ad5284,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-05-31 16:13:58 +0200,128,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1284,sqlitebrowser/sqlitebrowser,fa2589c829fde8e6eddff222d2edb5748b228676,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-06-01 12:43:43 +0200,22,    virtual void checkInput()
1285,sqlitebrowser/sqlitebrowser,fa2589c829fde8e6eddff222d2edb5748b228676,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-06-01 12:43:43 +0200,21,    virtual void updatePreview()
1286,sqlitebrowser/sqlitebrowser,fa2589c829fde8e6eddff222d2edb5748b228676,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-06-01 12:43:43 +0200,63,    Table(const QString& name): m_name(name) {}    ^
1287,sqlitebrowser/sqlitebrowser,fa2589c829fde8e6eddff222d2edb5748b228676,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-06-01 12:43:43 +0200,119,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1288,sqlitebrowser/sqlitebrowser,fa2589c829fde8e6eddff222d2edb5748b228676,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-06-01 12:43:43 +0200,128,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1289,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-19 22:55:35 +0200,23,    virtual void checkInput()
1290,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-19 22:55:35 +0200,22,    virtual void updatePreview()
1291,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-19 22:55:35 +0200,69,    Table(const QString& name): m_name(name) {}    ^
1292,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-19 22:55:35 +0200,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1293,sqlitebrowser/sqlitebrowser,1bac11348f1256775539c98e66ecb1b69c9c7882,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-19 22:55:35 +0200,130,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1294,sqlitebrowser/sqlitebrowser,94819f22e267d925a15df086c3d34abeac806091,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-20 14:49:07 +0200,23,    virtual void checkInput()
1295,sqlitebrowser/sqlitebrowser,94819f22e267d925a15df086c3d34abeac806091,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-20 14:49:07 +0200,22,    virtual void updatePreview()
1296,sqlitebrowser/sqlitebrowser,94819f22e267d925a15df086c3d34abeac806091,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-20 14:49:07 +0200,69,    Table(const QString& name): m_name(name) {}    ^
1297,sqlitebrowser/sqlitebrowser,94819f22e267d925a15df086c3d34abeac806091,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-20 14:49:07 +0200,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1298,sqlitebrowser/sqlitebrowser,94819f22e267d925a15df086c3d34abeac806091,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2013-09-20 14:49:07 +0200,130,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1299,sqlitebrowser/sqlitebrowser,0ae6f1895ea94f7031156073629231c55a442512,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-01-16 19:56:58 +0100,23,    virtual void checkInput()
1300,sqlitebrowser/sqlitebrowser,0ae6f1895ea94f7031156073629231c55a442512,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-01-16 19:56:58 +0100,22,    virtual void updatePreview()
1301,sqlitebrowser/sqlitebrowser,0ae6f1895ea94f7031156073629231c55a442512,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-01-16 19:56:58 +0100,69,    Table(const QString& name): m_name(name) {}    ^
1302,sqlitebrowser/sqlitebrowser,0ae6f1895ea94f7031156073629231c55a442512,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-01-16 19:56:58 +0100,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1303,sqlitebrowser/sqlitebrowser,0ae6f1895ea94f7031156073629231c55a442512,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-01-16 19:56:58 +0100,131,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1304,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-02-13 23:52:03 +0100,23,    virtual void checkInput()
1305,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-02-13 23:52:03 +0100,22,    virtual void updatePreview()
1306,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-02-13 23:52:03 +0100,69,    Table(const QString& name): m_name(name) {}    ^
1307,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-02-13 23:52:03 +0100,121,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1308,sqlitebrowser/sqlitebrowser,202b6c915eab05a9f5d53bf6733973e7d9c32c58,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-02-13 23:52:03 +0100,131,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1309,sqlitebrowser/sqlitebrowser,55435e27030cceb94a2f146d90f96822c41a36fa,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-05-30 17:54:13 +0200,23,    virtual void checkInput()
1310,sqlitebrowser/sqlitebrowser,55435e27030cceb94a2f146d90f96822c41a36fa,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-05-30 17:54:13 +0200,22,    virtual void updatePreview()
1311,sqlitebrowser/sqlitebrowser,55435e27030cceb94a2f146d90f96822c41a36fa,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-05-30 17:54:13 +0200,69,"    Table(const QString& name): m_name(name), m_rowidColumn(""rowid"") {}    ^"
1312,sqlitebrowser/sqlitebrowser,55435e27030cceb94a2f146d90f96822c41a36fa,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-05-30 17:54:13 +0200,126,    CreateTableWalker(antlr::RefAST r) : m_root(r) {}    ^
1313,sqlitebrowser/sqlitebrowser,55435e27030cceb94a2f146d90f96822c41a36fa,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-05-30 17:54:13 +0200,131,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1314,sqlitebrowser/sqlitebrowser,7d4248ecb45ad71c16c1ee59e4bc306fed86c7ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-26 17:52:15 +0200,23,    virtual void checkInput()
1315,sqlitebrowser/sqlitebrowser,7d4248ecb45ad71c16c1ee59e4bc306fed86c7ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-26 17:52:15 +0200,22,    virtual void updatePreview()
1316,sqlitebrowser/sqlitebrowser,7d4248ecb45ad71c16c1ee59e4bc306fed86c7ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-26 17:52:15 +0200,75,"    Table(const QString& name): m_name(name), m_rowidColumn(""_rowid_"") {}    ^"
1317,sqlitebrowser/sqlitebrowser,7d4248ecb45ad71c16c1ee59e4bc306fed86c7ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-26 17:52:15 +0200,139,    CreateTableWalker(antlr::RefAST r)    ^
1318,sqlitebrowser/sqlitebrowser,7d4248ecb45ad71c16c1ee59e4bc306fed86c7ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-26 17:52:15 +0200,131,"        char* formSQL = sqlite3_mprintf(""%Q"", (const char*)curList[i].toUtf8())"
1319,sqlitebrowser/sqlitebrowser,03879d93f054f183a5ab6591c245c316d73b5907,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-08-31 13:10:25 +0200,22,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1320,sqlitebrowser/sqlitebrowser,97e2025cc9127a4e29bb30a8d419bcfc638ec7f0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-02 18:05:04 +0200,26,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1321,sqlitebrowser/sqlitebrowser,9bef8a8f5837075b393281ed86d80db50cf9907e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-03 08:28:30 +0200,28,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1322,sqlitebrowser/sqlitebrowser,dc3ca09e12889fb0d973df85c6c43d14e59a1c49,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-04 19:07:12 +0200,28,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1323,sqlitebrowser/sqlitebrowser,12a85f42e140d0ca485b7d5202ec98a284c77b7c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-05 13:50:43 +0200,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1324,sqlitebrowser/sqlitebrowser,942b73aab0ba4d1573fa51dba59286ffd6fd94e9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-05 15:00:52 +0200,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1325,sqlitebrowser/sqlitebrowser,be01724da8509041e80b8d2664ef3abfd8e7a08f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-09-05 19:59:14 +0200,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1326,sqlitebrowser/sqlitebrowser,9ba36d02b2b25c782c74857c190a6fbb028ed5cb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-11-01 12:56:53 +0100,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1327,sqlitebrowser/sqlitebrowser,d9da5dcd7f9ace4609ee6d64f99c96eb56a35d32,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2014-11-08 12:17:56 +0100,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1328,sqlitebrowser/sqlitebrowser,3c243978e79a6f390fe0907f74668217286a4a30,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-03-03 14:23:34 +0100,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1329,sqlitebrowser/sqlitebrowser,ca389950136060eab9118cc7e6f73beecb7dcf68,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-03-04 21:28:38 +0100,29,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1330,sqlitebrowser/sqlitebrowser,b08cead7c804d56eb1fec0ae9112a4e945a7e996,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-07-03 21:42:46 +0200,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1331,sqlitebrowser/sqlitebrowser,743bdf994165dad610eeefc969ac46a6cd999bfe,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-07-06 22:48:18 +0200,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1332,sqlitebrowser/sqlitebrowser,631979c330bc356b4ef3ef75fb2b405604be4d6d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-08-17 00:17:48 +0200,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1333,sqlitebrowser/sqlitebrowser,9d7efcacfa4dd3ab89616a6a0eb64aee886c6ef8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2015-10-14 22:22:07 +0200,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1334,sqlitebrowser/sqlitebrowser,85934dee77526d5214c354646ececab3fb4a406a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2016-10-18 20:07:48 +0200,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1335,sqlitebrowser/sqlitebrowser,d868f4c85d46b6d978105206248d6cb37f3fd5eb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-01-16 15:52:37 +0100,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1336,sqlitebrowser/sqlitebrowser,e5a79ec0fa1dbae758c3dd02985df9f3c42f5f09,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-01-20 17:42:15 +0100,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1337,sqlitebrowser/sqlitebrowser,ebc3869627002db9e05ed379e1970b9c16cf8ec5,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-01-23 13:44:36 +0100,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1338,sqlitebrowser/sqlitebrowser,38144bbcadc68aec424583774d336922d1690cb1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-01-23 20:59:12 +0100,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1339,sqlitebrowser/sqlitebrowser,c68303478a206150692962b05086c48d110ed03c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-01-31 19:35:35 +0100,35,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1340,sqlitebrowser/sqlitebrowser,b0eb9acae203318a1c2f92b55adaf645970e42dd,src/ImportCsvDialog.cpp,"    checkInput();
     checkInput();
     checkInput();
ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-16 17:35:36 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1341,sqlitebrowser/sqlitebrowser,225eb5ab5f5efa667a3692dd02d30a6caea4b237,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-16 17:35:36 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1342,sqlitebrowser/sqlitebrowser,b5a2411eb6d8abe2f237f423daa2ebac35f38c47,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-16 17:35:36 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1343,sqlitebrowser/sqlitebrowser,97b4261190380b4e522876f4160771618aab96b6,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-16 17:35:36 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1344,sqlitebrowser/sqlitebrowser,357faeed04c2d24c7c70449dc30f6e2d41c21f99,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-16 17:35:36 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1345,sqlitebrowser/sqlitebrowser,a92a32157a30695c856d0e174601186db156aab9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-29 00:19:08 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1346,sqlitebrowser/sqlitebrowser,abd7d4e68956417640ca4c4a1fd6bda0f54f8f61,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-06-29 22:22:57 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1347,sqlitebrowser/sqlitebrowser,532fcd3f6b713e89f7739f25de09c353c61bbe99,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-03 13:22:21 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1348,sqlitebrowser/sqlitebrowser,643251780557ffccf84a3a672a4d88e941313f97,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-06 20:38:24 +0200,36,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1349,sqlitebrowser/sqlitebrowser,8c47c6d6683f28fd2ad27c963abe941dd219f4ec,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-07 22:26:32 +0200,44,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1350,sqlitebrowser/sqlitebrowser,b7a00d301a2a469ba4a4b430e7b3f1b13fdc2842,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-10 11:07:02 +0200,44,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1351,sqlitebrowser/sqlitebrowser,6ed8080fdb19e4b6cfadbb67d336bc6ce828d74c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-12 10:37:28 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1352,sqlitebrowser/sqlitebrowser,0eb1f6579815ee1148323ce928d24eab9f0f8002,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-13 15:03:13 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1353,sqlitebrowser/sqlitebrowser,659f38ebefc8f1d245b30fe279d318c26c2b84a2,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-18 15:10:43 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1354,sqlitebrowser/sqlitebrowser,2f304e09572cb43743f7da5638059aed6e9e3af4,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-18 21:44:34 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1355,sqlitebrowser/sqlitebrowser,8f82f26d4f115619afa687ef40f2c422ad4ad2ee,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-19 21:43:30 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1356,sqlitebrowser/sqlitebrowser,d2185d234be885715aab3b8a21582ec84fbfe08d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-27 14:18:38 +0200,44,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1357,sqlitebrowser/sqlitebrowser,425bfa1e75a2720f53a5ffab2d382d6b8aab861a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-27 15:52:34 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1358,sqlitebrowser/sqlitebrowser,cbd5d15cf5acb06f64cbbb7e667eac26cfbfa842,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-27 20:59:30 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1359,sqlitebrowser/sqlitebrowser,bbc4ad5b19cc6fb76700f59de3425b5f55c6e0ab,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-29 23:08:39 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1360,sqlitebrowser/sqlitebrowser,1666bb5606f64cf60c8ead24993a77f4a4a4fdb8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-09-29 23:21:39 +0200,43,"    foreach(QString enc, QTextCodec::availableCodecs())    ^"
1361,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,123,        m_pProgressDlg = new QProgressDialog(        ^
1362,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,123,        m_pProgressDlg = new QProgressDialog(        ^
1363,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1364,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,40,    ObjectIdentifier(QVariant variant)    ^
1365,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1366,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,276,    CheckConstraint(const QString& expr = QString())    ^
1367,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,140,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
1368,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
1369,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1370,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
1371,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
1372,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
1373,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1374,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
1375,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
1376,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,354,    virtual Types type() const { return Object::Table
1377,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1378,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,379,    void clear()
1379,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,381,    virtual FieldInfoList fieldInformation() const
1380,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,454,    virtual Types type() const { return Object::Index
1381,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,456,    virtual QString baseTable() const { return m_table
1382,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,476,    void clear()
1383,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1384,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,491,    virtual FieldInfoList fieldInformation() const
1385,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,508,    virtual Types type() const { return Object::View
1386,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1387,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,514,    void clear()
1388,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,521,    virtual FieldInfoList fieldInformation() const
1389,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,533,    virtual Types type() const { return Object::Trigger
1390,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1391,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,539,    virtual QString baseTable() const { return m_table
1392,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,136,    void start()         ^
1393,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,141,    bool update(unsigned long long pos)         ^
1394,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,149,    void end()         ^
1395,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,343,        bool matchingHeader = false
1396,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,341,        auto item = ui->filePicker->item(i)
1397,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,44,        encodingList.push_back(enc)
1398,sqlitebrowser/sqlitebrowser,3bd2dc3bc16c3233e888a24219808016d92001d0,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:10:08 +0100,241,        horizontalHeader.push_back(field->name())
1399,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1400,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1401,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1402,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,40,    ObjectIdentifier(QVariant variant)    ^
1403,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1404,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,276,    CheckConstraint(const QString& expr = QString())    ^
1405,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,140,        NoStructureUpdateChecks(DBBrowserDB& db) : m_db(db) { m_db.dontCheckForStructureUpdates = true
1406,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
1407,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1408,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
1409,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
1410,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
1411,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1412,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
1413,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
1414,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,354,    virtual Types type() const { return Object::Table
1415,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1416,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,379,    void clear()
1417,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,381,    virtual FieldInfoList fieldInformation() const
1418,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,454,    virtual Types type() const { return Object::Index
1419,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,456,    virtual QString baseTable() const { return m_table
1420,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,476,    void clear()
1421,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1422,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,491,    virtual FieldInfoList fieldInformation() const
1423,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,508,    virtual Types type() const { return Object::View
1424,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1425,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,514,    void clear()
1426,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,521,    virtual FieldInfoList fieldInformation() const
1427,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,533,    virtual Types type() const { return Object::Trigger
1428,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1429,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,539,    virtual QString baseTable() const { return m_table
1430,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,135,    void start()         ^
1431,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,140,    bool update(unsigned long long pos)         ^
1432,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,148,    void end()         ^
1433,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,339,        bool matchingHeader = false
1434,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,337,        auto item = ui->filePicker->item(i)
1435,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,44,        encodingList.push_back(enc)
1436,sqlitebrowser/sqlitebrowser,1ca92cdde3654270d9962fd0d9a08d59983ba9ad,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-30 13:37:34 +0100,237,        horizontalHeader.push_back(field->name())
1437,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1438,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1439,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1440,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1441,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
1442,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1443,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
1444,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
1445,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
1446,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1447,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
1448,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
1449,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,354,    virtual Types type() const { return Object::Table
1450,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1451,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,379,    void clear()
1452,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,381,    virtual FieldInfoList fieldInformation() const
1453,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,454,    virtual Types type() const { return Object::Index
1454,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,456,    virtual QString baseTable() const { return m_table
1455,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,476,    void clear()
1456,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1457,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,491,    virtual FieldInfoList fieldInformation() const
1458,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,508,    virtual Types type() const { return Object::View
1459,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1460,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,514,    void clear()
1461,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,521,    virtual FieldInfoList fieldInformation() const
1462,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,533,    virtual Types type() const { return Object::Trigger
1463,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1464,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,539,    virtual QString baseTable() const { return m_table
1465,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,135,    void start()         ^
1466,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,140,    bool update(unsigned long long pos)         ^
1467,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,148,    void end()         ^
1468,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,337,        auto item = ui->filePicker->item(i)
1469,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,44,        encodingList.push_back(enc)
1470,sqlitebrowser/sqlitebrowser,8ad34abb066e44cef3acf3af9ed90da40ff4638c,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-10-31 12:14:29 +0100,237,        horizontalHeader.push_back(field->name())
1471,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1472,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,122,        m_pProgressDlg = new QProgressDialog(        ^
1473,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1474,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1475,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
1476,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1477,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
1478,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
1479,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
1480,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1481,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
1482,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
1483,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,354,    virtual Types type() const { return Object::Table
1484,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1485,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,379,    void clear()
1486,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,381,    virtual FieldInfoList fieldInformation() const
1487,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,454,    virtual Types type() const { return Object::Index
1488,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,456,    virtual QString baseTable() const { return m_table
1489,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,476,    void clear()
1490,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1491,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,491,    virtual FieldInfoList fieldInformation() const
1492,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,508,    virtual Types type() const { return Object::View
1493,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1494,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,514,    void clear()
1495,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,521,    virtual FieldInfoList fieldInformation() const
1496,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,533,    virtual Types type() const { return Object::Trigger
1497,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1498,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,539,    virtual QString baseTable() const { return m_table
1499,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,135,    void start()         ^
1500,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,140,    bool update(unsigned long long pos)         ^
1501,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,148,    void end()         ^
1502,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,337,        auto item = ui->filePicker->item(i)
1503,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,44,        encodingList.push_back(enc)
1504,sqlitebrowser/sqlitebrowser,fae7235548e827e4e0c88a6ea55c525c3cfd43b7,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:39:31 +0100,237,        horizontalHeader.push_back(field->name())
1505,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,123,        m_pProgressDlg = new QProgressDialog(        ^
1506,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,123,        m_pProgressDlg = new QProgressDialog(        ^
1507,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1508,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,220,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1509,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,241,    virtual QString toSql(const FieldVector& applyOn) const
1510,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,243,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1511,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,258,    virtual QString toSql(const FieldVector& applyOn) const
1512,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,260,    virtual ConstraintTypes type() const { return UniqueConstraintType
1513,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,268,    virtual QString toSql(const FieldVector& applyOn) const
1514,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,270,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1515,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,284,    virtual QString toSql(const FieldVector& applyOn) const
1516,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,286,    virtual ConstraintTypes type() const { return CheckConstraintType
1517,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,354,    virtual Types type() const { return Object::Table
1518,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,362,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1519,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,379,    void clear()
1520,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,381,    virtual FieldInfoList fieldInformation() const
1521,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,454,    virtual Types type() const { return Object::Index
1522,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,456,    virtual QString baseTable() const { return m_table
1523,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,476,    void clear()
1524,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,482,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1525,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,491,    virtual FieldInfoList fieldInformation() const
1526,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,508,    virtual Types type() const { return Object::View
1527,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1528,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,514,    void clear()
1529,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,521,    virtual FieldInfoList fieldInformation() const
1530,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,533,    virtual Types type() const { return Object::Trigger
1531,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,535,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1532,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,539,    virtual QString baseTable() const { return m_table
1533,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,136,    void start()         ^
1534,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,141,    bool update(unsigned long long pos)         ^
1535,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,149,    void end()         ^
1536,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,340,        auto item = ui->filePicker->item(i)
1537,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,44,        encodingList.push_back(enc)
1538,sqlitebrowser/sqlitebrowser,60ce9c869be2d429cb98fb60dad048429d4d639a,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2017-11-02 22:56:39 +0100,240,        horizontalHeader.push_back(field->name())
1539,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1540,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1541,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1542,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1543,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
1544,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1545,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
1546,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
1547,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
1548,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1549,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
1550,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
1551,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,382,    virtual Types type() const { return Object::Table
1552,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1553,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,407,    void clear()
1554,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,409,    virtual FieldInfoList fieldInformation() const
1555,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,482,    virtual Types type() const { return Object::Index
1556,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,484,    virtual QString baseTable() const { return m_table
1557,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,504,    void clear()
1558,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1559,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,519,    virtual FieldInfoList fieldInformation() const
1560,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,536,    virtual Types type() const { return Object::View
1561,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1562,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,542,    void clear()
1563,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,549,    virtual FieldInfoList fieldInformation() const
1564,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,561,    virtual Types type() const { return Object::Trigger
1565,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1566,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,567,    virtual QString baseTable() const { return m_table
1567,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,139,    void start()         ^
1568,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,144,    bool update(unsigned long long pos)         ^
1569,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,152,    void end()         ^
1570,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,344,        auto item = ui->filePicker->item(i)
1571,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,44,        encodingList.push_back(enc)
1572,sqlitebrowser/sqlitebrowser,17f1eabb65ee19346efac42c9533b3d6cff0903e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-22 20:56:11 +0200,244,        horizontalHeader.push_back(field->name())
1573,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1574,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1575,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1576,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1577,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
1578,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1579,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
1580,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
1581,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
1582,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1583,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
1584,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
1585,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,382,    virtual Types type() const { return Object::Table
1586,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1587,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,407,    void clear()
1588,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,409,    virtual FieldInfoList fieldInformation() const
1589,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,482,    virtual Types type() const { return Object::Index
1590,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,484,    virtual QString baseTable() const { return m_table
1591,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,504,    void clear()
1592,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1593,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,519,    virtual FieldInfoList fieldInformation() const
1594,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,536,    virtual Types type() const { return Object::View
1595,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1596,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,542,    void clear()
1597,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,549,    virtual FieldInfoList fieldInformation() const
1598,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,561,    virtual Types type() const { return Object::Trigger
1599,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1600,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,567,    virtual QString baseTable() const { return m_table
1601,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,139,    void start()         ^
1602,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,144,    bool update(unsigned long long pos)         ^
1603,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,152,    void end()         ^
1604,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,343,        auto item = ui->filePicker->item(i)
1605,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,47,        encodingList.push_back(enc)
1606,sqlitebrowser/sqlitebrowser,e851c161d6c970a46e07cb0b222cf45d4ede3114,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 21:06:16 +0200,243,        horizontalHeader.push_back(field->name())
1607,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1608,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1609,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1610,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1611,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
1612,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1613,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
1614,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
1615,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
1616,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1617,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
1618,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
1619,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,382,    virtual Types type() const { return Object::Table
1620,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1621,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,407,    void clear()
1622,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,409,    virtual FieldInfoList fieldInformation() const
1623,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,482,    virtual Types type() const { return Object::Index
1624,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,484,    virtual QString baseTable() const { return m_table
1625,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,504,    void clear()
1626,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1627,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,519,    virtual FieldInfoList fieldInformation() const
1628,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,536,    virtual Types type() const { return Object::View
1629,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1630,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,542,    void clear()
1631,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,549,    virtual FieldInfoList fieldInformation() const
1632,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,561,    virtual Types type() const { return Object::Trigger
1633,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1634,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,567,    virtual QString baseTable() const { return m_table
1635,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,139,    void start()         ^
1636,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,144,    bool update(unsigned long long pos)         ^
1637,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,152,    void end()         ^
1638,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,343,        auto item = ui->filePicker->item(i)
1639,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,47,        encodingList.push_back(enc)
1640,sqlitebrowser/sqlitebrowser,3995ad2442a22029bcf75e618d42c9d716ff1d98,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-05-25 22:11:43 +0200,243,        horizontalHeader.push_back(field->name())
1641,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1642,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1643,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1644,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1645,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1646,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
1647,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1648,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
1649,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
1650,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
1651,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1652,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
1653,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
1654,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,382,    virtual Types type() const { return Object::Table
1655,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1656,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,407,    void clear()
1657,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,409,    virtual FieldInfoList fieldInformation() const
1658,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,482,    virtual Types type() const { return Object::Index
1659,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,484,    virtual QString baseTable() const { return m_table
1660,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,504,    void clear()
1661,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1662,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,519,    virtual FieldInfoList fieldInformation() const
1663,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,536,    virtual Types type() const { return Object::View
1664,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1665,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,542,    void clear()
1666,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,549,    virtual FieldInfoList fieldInformation() const
1667,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,561,    virtual Types type() const { return Object::Trigger
1668,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1669,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,567,    virtual QString baseTable() const { return m_table
1670,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,139,    void start()         ^
1671,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,144,    bool update(unsigned long long pos)         ^
1672,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,152,    void end()         ^
1673,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,343,        auto item = ui->filePicker->item(i)
1674,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1675,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,47,        encodingList.push_back(enc)
1676,sqlitebrowser/sqlitebrowser,51dbe72e23bd13cc1881fe6a6fa7938937f1510e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,243,        horizontalHeader.push_back(field->name())
1677,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1678,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1679,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1680,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,242,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1681,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1682,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,263,    virtual QString toSql(const FieldVector& applyOn) const
1683,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,265,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1684,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,280,    virtual QString toSql(const FieldVector& applyOn) const
1685,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,282,    virtual ConstraintTypes type() const { return UniqueConstraintType
1686,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,293,    virtual QString toSql(const FieldVector& applyOn) const
1687,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,295,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1688,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,312,    virtual QString toSql(const FieldVector& applyOn) const
1689,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,314,    virtual ConstraintTypes type() const { return CheckConstraintType
1690,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,382,    virtual Types type() const { return Object::Table
1691,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,390,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1692,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,407,    void clear()
1693,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,409,    virtual FieldInfoList fieldInformation() const
1694,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,482,    virtual Types type() const { return Object::Index
1695,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,484,    virtual QString baseTable() const { return m_table
1696,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,504,    void clear()
1697,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,510,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1698,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,519,    virtual FieldInfoList fieldInformation() const
1699,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,536,    virtual Types type() const { return Object::View
1700,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,538,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1701,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,542,    void clear()
1702,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,549,    virtual FieldInfoList fieldInformation() const
1703,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,561,    virtual Types type() const { return Object::Trigger
1704,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1705,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,567,    virtual QString baseTable() const { return m_table
1706,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,139,    void start()         ^
1707,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,144,    bool update(unsigned long long pos)         ^
1708,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,152,    void end()         ^
1709,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,343,        auto item = ui->filePicker->item(i)
1710,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1711,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,47,        encodingList.push_back(enc)
1712,sqlitebrowser/sqlitebrowser,3da520cdd1de73b09c32fe2aad08e2c3d577550b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-06-08 22:46:47 +0200,243,        horizontalHeader.push_back(field->name())
1713,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1714,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1715,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1716,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,253,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1717,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1718,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,274,    virtual QString toSql(const QStringList& applyOn) const
1719,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,276,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1720,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,291,    virtual QString toSql(const QStringList& applyOn) const
1721,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,293,    virtual ConstraintTypes type() const { return UniqueConstraintType
1722,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,304,    virtual QString toSql(const QStringList& applyOn) const
1723,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,306,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1724,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,323,    virtual QString toSql(const QStringList& applyOn) const
1725,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,325,    virtual ConstraintTypes type() const { return CheckConstraintType
1726,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,409,    virtual Types type() const { return Object::Table
1727,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,419,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1728,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,431,    virtual FieldInfoList fieldInformation() const
1729,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,497,    virtual Types type() const { return Object::Index
1730,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,503,    virtual QString baseTable() const { return m_table
1731,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,518,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1732,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,527,    virtual FieldInfoList fieldInformation() const
1733,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,543,    virtual Types type() const { return Object::View
1734,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,547,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1735,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,553,    virtual FieldInfoList fieldInformation() const
1736,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,562,    virtual Types type() const { return Object::Trigger
1737,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,564,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1738,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,568,    virtual QString baseTable() const { return m_table
1739,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,139,    void start()         ^
1740,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,144,    bool update(unsigned long long pos)         ^
1741,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,152,    void end()         ^
1742,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,343,        auto item = ui->filePicker->item(i)
1743,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1744,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,47,        encodingList.push_back(enc)
1745,sqlitebrowser/sqlitebrowser,bf505edf661dc61019ebeb339deada4f740dc069,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-05 22:24:46 +0200,243,        horizontalHeader.push_back(field->name())
1746,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1747,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,126,        m_pProgressDlg = new QProgressDialog(        ^
1748,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1749,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1750,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1751,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,273,    virtual QString toSql(const QStringList& applyOn) const
1752,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,275,    virtual ConstraintTypes type() const { return ForeignKeyConstraintType
1753,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,290,    virtual QString toSql(const QStringList& applyOn) const
1754,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,292,    virtual ConstraintTypes type() const { return UniqueConstraintType
1755,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,303,    virtual QString toSql(const QStringList& applyOn) const
1756,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,305,    virtual ConstraintTypes type() const { return PrimaryKeyConstraintType
1757,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,322,    virtual QString toSql(const QStringList& applyOn) const
1758,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,324,    virtual ConstraintTypes type() const { return CheckConstraintType
1759,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,408,    virtual Types type() const { return Object::Table
1760,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,418,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1761,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,430,    virtual FieldInfoList fieldInformation() const
1762,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,496,    virtual Types type() const { return Object::Index
1763,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,502,    virtual QString baseTable() const { return m_table
1764,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,517,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const"
1765,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,526,    virtual FieldInfoList fieldInformation() const
1766,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,542,    virtual Types type() const { return Object::View
1767,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,546,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1768,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,552,    virtual FieldInfoList fieldInformation() const
1769,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,561,    virtual Types type() const { return Object::Trigger
1770,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,563,"    QString sql(const QString& schema = QString(""main""), bool ifNotExists = false) const { /* TODO */ Q_UNUSED(schema)"
1771,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,567,    virtual QString baseTable() const { return m_table
1772,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,139,    void start()         ^
1773,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,144,    bool update(unsigned long long pos)         ^
1774,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,152,    void end()         ^
1775,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,343,        auto item = ui->filePicker->item(i)
1776,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1777,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,47,        encodingList.push_back(enc)
1778,sqlitebrowser/sqlitebrowser,130afb1c087aeb08cd58a2614df35c69655a6c4d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-09-06 00:08:32 +0200,243,        horizontalHeader.push_back(field.name())
1779,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1780,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1781,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1782,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1783,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1784,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,144,    void start()         ^
1785,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,149,    bool update(unsigned long long pos)         ^
1786,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,157,    void end()         ^
1787,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,348,        auto item = ui->filePicker->item(i)
1788,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1789,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,47,        encodingList.push_back(enc)
1790,sqlitebrowser/sqlitebrowser,f11b1a04454e2df19401bec31df154d6624351fb,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-23 19:52:34 +0200,248,        horizontalHeader.push_back(field.name())
1791,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1792,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1793,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1794,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,251,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1795,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1796,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,144,    void start()         ^
1797,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,149,    bool update(unsigned long long pos)         ^
1798,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,157,    void end()         ^
1799,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,348,        auto item = ui->filePicker->item(i)
1800,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,43,        void operator() (sqlite3 * db) const                                   ^
1801,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,47,        encodingList.push_back(enc)
1802,sqlitebrowser/sqlitebrowser,5a1d33864740e0f48705852c659aea3bf6aa3df9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-10-24 13:38:28 +0200,248,        horizontalHeader.push_back(field.name())
1803,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,131,        m_pProgressDlg = new QProgressDialog(        ^
1804,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,131,        m_pProgressDlg = new QProgressDialog(        ^
1805,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1806,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,252,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1807,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,39,        DatabaseReleaser(DBBrowserDB * pParent_ = nullptr) : pParent(pParent_) {}        ^
1808,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,144,    void start()         ^
1809,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,149,    bool update(unsigned long long pos)         ^
1810,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,157,    void end()         ^
1811,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,43,        void operator() (sqlite3 * db) const                                   ^
1812,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,47,        encodingList.push_back(enc)
1813,sqlitebrowser/sqlitebrowser,37a5645bf5757fe296c1c5510c6db314e215d3b9,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2018-11-15 15:24:00 +0100,248,        horizontalHeader.push_back(field.name())
1814,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1815,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1816,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1817,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,255,"    ForeignKeyClause(const QString& table = QString(), const QStringList& columns = QStringList(), const QString& constraint = QString())    ^"
1818,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,45,        void operator() (sqlite3 * db) const                                   ^
1819,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,47,        encodingList.push_back(enc)
1820,sqlitebrowser/sqlitebrowser,f59a2453a2b36ddae00a1831b266079e1ea17001,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-26 14:48:24 +0200,248,        horizontalHeader.push_back(field.name())
1821,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1822,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,131,        m_pProgressDlg = new QProgressDialog(        ^
1823,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1824,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,256,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1825,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,52,        void operator() (sqlite3 * db) const                                   ^
1826,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,47,        encodingList.push_back(enc)
1827,sqlitebrowser/sqlitebrowser,15c23bb0d3e332b999e4133f034255b310e5b337,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 18:11:19 +0200,248,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1828,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 19:14:10 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1829,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 19:14:10 +0200,256,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1830,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 19:14:10 +0200,52,        void operator() (sqlite3 * db) const                                   ^
1831,sqlitebrowser/sqlitebrowser,f821fbb1a8dc4fd84e7ddd45991b4f9b6f501b0d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-04-29 19:14:10 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1832,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 22:09:21 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1833,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 22:09:21 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1834,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 22:09:21 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1835,sqlitebrowser/sqlitebrowser,d54b820fb2274f7c7602f26bb2e48e8cfa2a7d33,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 22:09:21 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1836,sqlitebrowser/sqlitebrowser,cec6b825611a5aa44a7fe09e22ccaca20ecb5510,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 23:16:09 +0200,55,"    CSVParser(bool trimfields = true, char fieldseparator = ',', char quotechar = '""')"
1837,sqlitebrowser/sqlitebrowser,cec6b825611a5aa44a7fe09e22ccaca20ecb5510,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 23:16:09 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1838,sqlitebrowser/sqlitebrowser,cec6b825611a5aa44a7fe09e22ccaca20ecb5510,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 23:16:09 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1839,sqlitebrowser/sqlitebrowser,cec6b825611a5aa44a7fe09e22ccaca20ecb5510,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-07 23:16:09 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1840,sqlitebrowser/sqlitebrowser,afee3ca79eaf29c5039d76750a1b63baf280cd35,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-08 23:54:06 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1841,sqlitebrowser/sqlitebrowser,afee3ca79eaf29c5039d76750a1b63baf280cd35,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-08 23:54:06 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1842,sqlitebrowser/sqlitebrowser,afee3ca79eaf29c5039d76750a1b63baf280cd35,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-08 23:54:06 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1843,sqlitebrowser/sqlitebrowser,afee3ca79eaf29c5039d76750a1b63baf280cd35,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-08 23:54:06 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1844,sqlitebrowser/sqlitebrowser,e2f3186d194c800011996ef1a04c9c3aa728c65e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:10:31 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1845,sqlitebrowser/sqlitebrowser,e2f3186d194c800011996ef1a04c9c3aa728c65e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:10:31 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1846,sqlitebrowser/sqlitebrowser,e2f3186d194c800011996ef1a04c9c3aa728c65e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:10:31 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1847,sqlitebrowser/sqlitebrowser,e2f3186d194c800011996ef1a04c9c3aa728c65e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:10:31 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1848,sqlitebrowser/sqlitebrowser,6bbf401abd5eac01572d36a5dbaa92228eb33a86,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:28:48 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1849,sqlitebrowser/sqlitebrowser,6bbf401abd5eac01572d36a5dbaa92228eb33a86,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:28:48 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1850,sqlitebrowser/sqlitebrowser,6bbf401abd5eac01572d36a5dbaa92228eb33a86,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:28:48 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1851,sqlitebrowser/sqlitebrowser,6bbf401abd5eac01572d36a5dbaa92228eb33a86,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-11 16:28:48 +0200,249,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1852,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-29 15:54:27 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1853,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-29 15:54:27 +0200,161,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1854,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-29 15:54:27 +0200,53,        void operator() (sqlite3 * db) const                                   ^
1855,sqlitebrowser/sqlitebrowser,cf05e7a462746c9dc8cba31d063a532623afdc1d,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-05-29 15:54:27 +0200,248,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1856,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-06 20:25:18 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1857,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-06 20:25:18 +0100,168,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1858,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-06 20:25:18 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1859,sqlitebrowser/sqlitebrowser,ba1270cedb0feb9522bd787a640f52f68cd5f544,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-06 20:25:18 +0100,243,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1860,sqlitebrowser/sqlitebrowser,ec41b491efc1b1eb4093b92d02ea40bb0d008447,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-14 17:45:54 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1861,sqlitebrowser/sqlitebrowser,ec41b491efc1b1eb4093b92d02ea40bb0d008447,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-14 17:45:54 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1862,sqlitebrowser/sqlitebrowser,ec41b491efc1b1eb4093b92d02ea40bb0d008447,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-14 17:45:54 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1863,sqlitebrowser/sqlitebrowser,ec41b491efc1b1eb4093b92d02ea40bb0d008447,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2019-11-14 17:45:54 +0100,243,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1864,sqlitebrowser/sqlitebrowser,9b670b4b9420bc3116477cab098905de2750abc5,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-01-06 00:50:33 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1865,sqlitebrowser/sqlitebrowser,9b670b4b9420bc3116477cab098905de2750abc5,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-01-06 00:50:33 +0100,176,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1866,sqlitebrowser/sqlitebrowser,9b670b4b9420bc3116477cab098905de2750abc5,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-01-06 00:50:33 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1867,sqlitebrowser/sqlitebrowser,9b670b4b9420bc3116477cab098905de2750abc5,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-01-06 00:50:33 +0100,246,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1868,sqlitebrowser/sqlitebrowser,99193b96b9406e7a6b5ddead9b230cdce8af3664,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-06-17 16:32:01 -0600,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1869,sqlitebrowser/sqlitebrowser,99193b96b9406e7a6b5ddead9b230cdce8af3664,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-06-17 16:32:01 -0600,184,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1870,sqlitebrowser/sqlitebrowser,99193b96b9406e7a6b5ddead9b230cdce8af3664,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-06-17 16:32:01 -0600,54,        void operator() (sqlite3 * db) const                                   ^
1871,sqlitebrowser/sqlitebrowser,99193b96b9406e7a6b5ddead9b230cdce8af3664,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-06-17 16:32:01 -0600,246,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1872,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,587,"                            nullValues.push_back(""0"")"
1873,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,589,"                            nullValues.push_back("""")"
1874,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,598,                        nullValues.push_back(QByteArray())
1875,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1876,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1877,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,54,        void operator() (sqlite3 * db) const                                   ^
1878,sqlitebrowser/sqlitebrowser,f75a35877e53b63255f5fda4a26659b2068c4a80,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-07-17 22:45:33 +0200,246,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1879,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,592,"                            nullValues.push_back(""0"")"
1880,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,594,"                            nullValues.push_back("""")"
1881,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,603,                        nullValues.push_back(QByteArray())
1882,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1883,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1884,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1885,sqlitebrowser/sqlitebrowser,f9314b6dbe66a96413a6fe8c282cc09f0cb784c1,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:20:22 +0100,250,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1886,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,592,"                            nullValues.push_back(""0"")"
1887,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,594,"                            nullValues.push_back("""")"
1888,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,603,                        nullValues.push_back(QByteArray())
1889,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1890,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1891,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1892,sqlitebrowser/sqlitebrowser,dafa873dea8e33c05634047e53bd4675267d2d0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 00:58:14 +0100,250,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1893,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,592,"                            nullValues.push_back(""0"")"
1894,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,594,"                            nullValues.push_back("""")"
1895,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,603,                        nullValues.push_back(QByteArray())
1896,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1897,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,187,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1898,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1899,sqlitebrowser/sqlitebrowser,e0b40ad90e585efb9594b290582a97d090f493da,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2020-12-20 14:58:27 +0100,250,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1900,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,592,"                            nullValues.push_back(""0"")"
1901,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,594,"                            nullValues.push_back("""")"
1902,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,603,                        nullValues.push_back(QByteArray())
1903,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1904,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,180,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1905,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1906,sqlitebrowser/sqlitebrowser,e8405b78d775c7ac0030916535fadba8c0f40f0b,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-14 12:44:44 +0100,250,        horizontalHeader.push_back(QString::fromStdString(field.name()))
1907,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,591,"                            nullValues.push_back(""0"")"
1908,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,593,"                            nullValues.push_back("""")"
1909,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,602,                        nullValues.push_back(QByteArray())
1910,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1911,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,180,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1912,sqlitebrowser/sqlitebrowser,329c07e0b2cd06d20a04d71df3053d5264d2a77e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-22 14:38:35 +0100,54,        void operator() (sqlite3 * db) const                                   ^
1913,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,590,"                            nullValues.push_back(""0"")"
1914,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,592,"                            nullValues.push_back("""")"
1915,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,601,                        nullValues.push_back(QByteArray())
1916,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1917,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,152,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1918,sqlitebrowser/sqlitebrowser,02db68107a5c7bf7cc7ccf9ad032d04433f8e60f,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-01-30 20:47:31 +0100,66,        void operator() (sqlite3 * db) const                                   ^
1919,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,584,"                            nullValues.push_back(""0"")"
1920,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,586,"                            nullValues.push_back("""")"
1921,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,595,                        nullValues.push_back(QByteArray())
1922,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1923,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,152,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1924,sqlitebrowser/sqlitebrowser,248a630dd17662a0ea0dfaa6623e16972cbba299,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-26 22:09:47 +0100,66,        void operator() (sqlite3 * db) const                                   ^
1925,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,596,"                            nullValues.push_back(""0"")"
1926,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,598,"                            nullValues.push_back("""")"
1927,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,607,                        nullValues.push_back(QByteArray())
1928,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1929,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,152,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1930,sqlitebrowser/sqlitebrowser,36c5b1baf44797a45efcfc782c0b8f5c9f56dbc8,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-02-28 22:05:43 +0100,66,        void operator() (sqlite3 * db) const                                   ^
1931,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,604,"                            nullValues.push_back(""0"")"
1932,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,606,"                            nullValues.push_back("""")"
1933,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,615,                        nullValues.push_back(QByteArray())
1934,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1935,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,152,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1936,sqlitebrowser/sqlitebrowser,035a541c5bed67127791b137823afe016991670e,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-03-19 13:44:29 +0100,66,        void operator() (sqlite3 * db) const                                   ^
1937,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,608,"                            nullValues.push_back(""0"")"
1938,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,610,"                            nullValues.push_back("""")"
1939,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,619,                        nullValues.push_back(QByteArray())
1940,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1941,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,152,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1942,sqlitebrowser/sqlitebrowser,6bdacf6595189e3d93d0ad002b4fcbd8aad23043,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-07-18 18:36:33 +0200,67,        void operator() (sqlite3 * db) const                                   ^
1943,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,608,"                            nullValues.push_back(""0"")"
1944,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,610,"                            nullValues.push_back("""")"
1945,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,619,                        nullValues.push_back(QByteArray())
1946,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,56,"    CSVParser(bool trimfields = true, char32_t fieldseparator = ',', char32_t quotechar = '""')"
1947,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,153,"    ForeignKeyClause(const std::string& table = std::string(), const StringVector& columns = {}, const std::string& constraint = std::string())    ^"
1948,sqlitebrowser/sqlitebrowser,d1f75977638723d2f1c7d5c502bbeb457b411e13,src/ImportCsvDialog.cpp,"ImportCsvDialog::~ImportCsvDialog()
{
    delete ui;
}
",2021-12-27 12:01:09 +0100,67,        void operator() (sqlite3 * db) const                                   ^
